#region[1] syntax 
    #region[1] basic //todo edit here [bool|var|print]
        #region[1] bool 
            print(10>1) #true
            print("cat" == "dog") #false
            print (1 != 2) #true
            

            print(5+10 == 6+7)  # If the two values are not equal, as in the
            print((6*3 >= 18) and (9+9 <= 36/2))

            print((15/3 < 2+4) or (0 >= 6-7))  # True or True = True

            print(not today == "Tuesday")   
        #endregion

        #region[2] var 
            captain: str = “Picard”
            a:int=1
        #endregion

        #region[3] print 
            print("hello "+ "world")
            print(type("a"))
            print(type(2.5))
            print("The area of the triangle is: " + str(area)) 
        #endregion
    #endregion

    #region[1] function 
        #region [1] ex
            #region[1] calc
                def to_celsius(x):
                   '''Convert Fahrenheit to Celsius'''
                   return (x-32) * 5/9


                to_celsius(75)
            #endregion

            #region[2] params
                def greeting(name, department):
                    print("Welcome, " + name)
                    print("You are part of " + department)
                    
                greeting("Blake", "Software engineering")
                greeting("Ellis", "Software engineering")
            #endregion

            #region[3] calc sec
                def convert_seconds(seconds):
                    hours = seconds // 3600
                    minutes = (seconds - hours * 3600) // 60
                    remaining_seconds = seconds - hours * 3600 - minutes * 60
                    return hours, minutes, remaining_seconds
                
                hours, minutes, seconds = convert_seconds(5000)
                print(hours, minutes, seconds)
            #endregion


            #region[4] convert_volume

                def convert_volume(fluid_ounce):
                    ml = fluid_ounce * 29.5  
                    return ml
                print("The volume in milliliters is " + str(convert_volume(2)))
                
                print("The volume in milliliters is " + str(convert_volume(2)*2))
                # print("The volume in milliliters is " + str(convert_volume(4))
            #endregion

            #region[5] fact
                def fractional_part(numerator, denominator):
                    # Operate with numerator and denominator to
                    # keep just the fractional part of the quotient 
                    if denominator == 0 or numerator == 0:
                        part = 0
                    else:
                        part = (numerator % denominator) / denominator
                        return part

                    print(fractional_part(5, 5)) # Should print 0
                    print(fractional_part(5, 4)) # Should print 0.25
                    print(fractional_part(5, 3)) # Should print 0.66...
                    print(fractional_part(5, 2)) # Should print 0.5
                    print(fractional_part(5, 0)) # Should print 0
                    print(fractional_part(0, 5)) # Should print 0
            #endregion

            #region [6] factorial
                #region [1] implement

                    def factorial(n):
                        print("Factorial called with " + str(n))
                        if n < 2:
                            print("Returning 1")
                            return 1
                        result = n * factorial(n-1)
                        print("Returning " + str(result) + " for factorial of " + str(n))
                        return result

                        factorial(4) #max 990
                #endregion

                #region [2] result
                    Factorial called with 4
                    Factorial called with 3
                    Factorial called with 2
                    Factorial called with 1
                    Returning 1
                    Returning 2 for factorial of 2
                    Returning 6 for factorial of 3
                    Returning 24 for factorial of 4
                    24
                #endregion

                #region [3] recursion syntax
                    def recursive_function(parameters):
                        if base_case_condition(parameters):
                            return base_case_value
                        recursive_function(modified_parameters)
                #endregion
            #endregion  
        #endregion

        #region[2] built in function 3
            print("Investigate failed login attempts during", month, "if more than", 100)
            print(type("This is a string"))
            string_representation = str(number)

            time_list = [12, 2, 32, 19, 57, 22, 14]
            print(sorted(time_list))

            time_list = [12, 2, 32, 19, 57, 22, 14]
            print(min(time_list))
            print(max(time_list))
        #endregion
    #endregion

    #region[1] if/else 
        number = -4
        if number > 0:
           print('Number is positive.')
        elif number == 0:
           print('Number is zero.')
        else:
           print('Number is negative.')

        def hint_username(username):
            if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long")
    #endregion

    #region[1] loops 
        #region [1] while
            #region[1] while loops
                x = 0
                while x < 5:
                    print("Not there yet, x=" + str(x))
                    x = x + 1
                print("x=" + str(x))
                x=5 

                def attempts(n):
                    x = 1
                    while x <= n:
                        print("Attempt " + str(x))
                        x += 1
                    print("Done")
                attempts(5)
            #endregion

            #region[2] while compare
                x = 1
                sum = 0
                while x < 10:
                    sum = sum + x
                    x = x + 1

                product = 1
                while x < 10:
                    product = product * x
                    x = x + 1

                print(sum, product)
                #Output 45 1
            #endregion

            #region[3] while group
                while factor < given_number:
                    if given_number % factor == 0:
                        count += 1
                    factor += 1
                return count

                print(count_factors(0)) # Count value should be 0
                print(count_factors(3)) # Should count 2 factors (1x3)
                print(count_factors(10)) # Should count 4 factors (1x10, 2x5)
                print(count_factors(24)) # Should count 8 factors (1x24, 2x12, 3x8, and 4x6). 
            #endregion
        #endregion

        #region [1] for
            #region[1] for loop
                #region in range 
                    for x in range(5):
                        print(x)
                #endregion

                #region for array
                    values = [ 23, 52, 59, 37, 48 ]
                    sum = 0
                    length = 0
                    for value in values:
                        sum += value
                        length += 1

                    print("Total sum: " + str(sum) + " - Average: " + str(sum/length))
                #endregion

                #region for string
                    #region 1

                        for i in range(len(greeting)): # 0 1 2 3 4 
                            print(i) 
                    #endregion

                    #region 2
                        greeting = 'Hello'
                        index = 0
                        while index < len(greeting):
                            print(greeting[index])
                            index += 1
                    #endregion

                    #region 3
                        greeting = 'Hello'
                        index = 0
                        while index < len(greeting):
                            print(greeting[index:index+1])
                            index += 1
                    #endregion

                    #region 4
                        numbers = [1, 2, 3, 4, 5]
                        squared_numbers = [x ** 2 for x in numbers]
                        print(squared_numbers)
                    #endregion

                    #region 5

                    #endregion
                #endregion

                #region def for loop
                    def greet_friends(friends):
                        for friend in friends:
                            print("Hi " + friend)

                    greet_friends(['Taylor', 'Luisa', 'Jamaal', 'Eli'])
                #endregion
            #endregion

            #region[2] for repeated 
                # This loop iterates on the value of the "number" variable in a range
                # of 1 to 6+1 (the upper range limit of 6 is excluded, so +1 has
                # been added to it to include 6 in the range). The incremental value
                # for the loop is 2 (number+2). The print() function will output the
                # resulting value of "number" multiplied by 3.

                for number in range(1, 6+1, 2):
                    print(number * 3)

                # The loop should print 3, 9, 15
            #endregion

            #region[3] in range(2,8,4)
                # This loop iterates on the value of the "number" variable in a range
                # of 2 to 7 (the upper range limit of 8 is excluded). The print() 
                # function will output the resulting value of "number" squared.

                for number in range(2,8):
                    print(number**2)

                # The loop should print 4, 9, 16, 25, 36, 49
            #endregion

            #region[4] nested for loop from latest to first loop 
                for x in range(2):
                    print("This is the outer loop iteration number " + str(x))
                    for y in range(3+1):
                        print("Inner loop iteration number " + str(y))
                    print("Exit inner loop")

                This is the outer loop iteration number 0
                Inner loop iteration number 0
                Inner loop iteration number 1
                Inner loop iteration number 2
                Inner loop iteration number 3
                Exit inner loop
                This is the outer loop iteration number 1
                Inner loop iteration number 0
                Inner loop iteration number 1
                Inner loop iteration number 2
                Inner loop iteration number 3
                Exit inner loop
            #endregion

            #region[5] shortcut
                sequence = range(10)
                new_list = [x for x in sequence if x % 2 == 0]
            #endregion

            #region[6] shortcut 2
                sequence = range(10)
                new_list = []
                for x in sequence:
                    if x % 2 == 0:
                        new_list.append(x)
            #endregion
        #endregion
    #endregion  

    #region[1] string 
        #region [1] slice

            #region[1] slice
                string1 = "Greetings, Earthlings"
                print(string1[0])   # Prints “G”
                print(string1[4:8]) # Prints “ting”
                print(string1[11:]) # Prints “Earthlings”
                print(string1[:5])  # Prints “Greet”
            #endregion

            #region[2] slice -1 | after end |
                print(string1[-10:])     # Prints “Earthlings” again
                print(string1[55:])     # Prints “” 
                print(string1[0::2])    # Prints “Getns atlns” reverse every 2 char
                print(string1[::-1])    # Prints “sgnilhtraE ,sgniteerG” reverse every char
                # The next 3 digits are the line number:
                  line = phonenum[-4:]
            #endregion
        #endregion

        #region [2] concat
            #region[1] concat
                greetings = ["Hello", "world"]
                print(" ".join(greetings))  # Prints "Hello world"
                You can also concatenate a combination of strings and variables like in the following example.
                name = "Alice"
                print("Hello, " + name + "!")  # Prints "Hello, Alice!"
            #endregion

            #region[2] def concat 
                def format_phone(phonenum):
                    area_code = "(" + phonenum[:3] + ")"
                    exchange = phonenum[3:6]
                    line = phonenum[-4:]
                    return area_code + " " + exchange + "-" + line

                print(format_phone("2025551212")) # Outputs: (202) 555-1212
            #endregion

            #region[3] concat array with while loop strings
                def counter(start, stop):
                    if start > stop:
                        return_string = "Counting down: "
                        while start > stop: # Complete the while loop
                            return_string += str(start) # Add the numbers to the "return_string"
                            if start > stop + 1:
                                return_string += ","
                            start -= 1 # Increment the appropriate variable
                    else:
                        return_string = "Counting up: "
                        while start < stop: # Complete the while loop
                            return_string += str(start) # Add the numbers to the "return_string"
                            if start < stop - 1:
                                return_string += ","
                            start += 1 # Increment the appropriate variable
                    return return_string + str(start)

                print(counter(1, 10)) # Should be "Counting up: 1,2,3,4,5,6,7,8,9,10"
                print(counter(2, 1)) # Should be "Counting down: 2,1"
                print(counter(5, 5)) # Should be "Counting up: 5"
            #endregion

            #region[4] concat with for loop
                def even_numbers(maximum):
                    return_string = ""  # Initializes variable as a string

                    # Complete the for loop with a range that includes all even numbers
                    # up to and including the "maximum" value, but excluding 0.
                    for x in range(2, maximum + 1, 2):
                        # Complete the body of the loop by appending the even number
                        # followed by a space to the "return_string" variable.
                        return_string += str(x) + " "

                    # This .strip command will remove the final " " space at the end of
                    # the "return_string".
                    return return_string.strip()

                print(even_numbers(6))  # Should be 2 4 6
                print(even_numbers(10)) # Should be 2 4 6 8 10
                print(even_numbers(1))  # No numbers displayed
                print(even_numbers(3))  # Should be 2
                print(even_numbers(0))  # No numbers displayed
            #endregion
        #endregion

        #region [3] ex 
            #region [1] print func 
                name = "Sasha"
                color = 'Gold'
                print("Name: " + name + ", Favorite color: " + color)

                "a" * 3 //aaa

                name = "a"
                print(name[0])

                fruit = "Pineapple"
                print(fruit[:4])
                print(fruit[4:])

                pets="Cats & Dogs"
                "Dragons" in pets //false
            #endregion

            #region [2] print in
                message = "A kong string with a silly typo"
                message[2] = "l"
                #This will throw an error

                message = "A kong string with a silly typo"
                new_message = message[0:2] + "l" + message[3:]
                print(new_message)

                pets="Cats & Dogs"
                "Dragons" in pets #false
            #endregion

            #region[3] slice email 
                def replace_domain(email, old_domain, new_domain):
                    if "@" + old_domain in email:
                        index = email.index("@" + old_domain)
                        new_email = email[:index] + "@" + new_domain
                        return new_email
                    return email
                
                new_email = replace_domain("ddd@a", "a", "bbb")
                print(new_email)
            #endregion

            #region [4] string methods advance
                #region [1] print methods
                    name = "a" //todo edit here 1
                    number = len(name) * 3
                    print("Hello {}, your lucky number is {}".format(name, number))

                    name = "a" //todo edit here 2
                    print("Your lucky number is {number}, {name}.".format(name=name, number=len(name)*3))
                    Your lucky number is 15, a.

                    price = 7.5 //todo edit here 3
                    with_tax = price * 1.09
                    print(price, with_tax)
                    print("Base price: ${:.2f}. With Tax: ${:.2f}".format(price, with_tax))
                    7.5 8.175
                    Base price: $7.50. With Tax: $8.18
                #endregion

                #region [2] function loop 
                    def to_celsius(x):
                        return (x-32)*5/9

                    for x in range(0,101,10):
                        print("{:>3} F | {:>6.2f} C".format(x, to_celsius(x))) //todo edit here for function
                    0 F | -17.78 C
                    10 F | -12.22 C
                    20 F |  -6.67 C
                    30 F |  -1.11 C
                    40 F |   4.44 C
                    50 F |  10.00 C
                    60 F |  15.56 C
                    70 F |  21.11 C
                    80 F |  26.67 C
                    90 F |  32.22 C
                    100 F |  37.78 C
                #endregion
            #endregion

            #region [5] basket
                # Here are the items in the customer's basket. Each item is a tuple
                # of (item name, weight, price per pound).
                basket = [
                    ("Peaches", 3.0, 2.99),
                    ("Pears", 5.0, 1.66),
                    ("Plums", 2.5, 3.99)
                ]

                subtotal = 0.00
                for item in basket:
                  fruit, weight, unit_price = item //ugly edit here (item name, weight, price per pound)
                  subtotal += (weight * unit_price)

                tax_rate = 0.06625  # 6.625% sales tax in New Jersey
                tax_amt = subtotal * tax_rate
                total = subtotal + tax_amt

                print("Subtotal:", subtotal)
                print("Sales Tax:", tax_amt)
                print("Total:", total)

                fruit = "peaches"
                weight = 3.0
                per_pound = 2.99

                #region [1] print
                    output = "You are buying {} pounds of {} at {} per pound.".format(weight, fruit, per_pound) //ugly edit here
                    print(output)

                    output = "{1} are {2} per pound, and you have {0} pounds of {1}.".format(weight, fruit, per_pound) //tsc edit here
                    print(output)

                    output = "{fruit} are {price} per pound, and you have {weight} pounds of {fruit}.".format(weight=weight, fruit=fruit, price=per_pound)
                    print(output) //idea edit here

                    print("Subtotal:     ${:10,.2f}".format(subtotal)) //todo edit
                    print("Sales Tax:    ${:10,.2f}".format(tax_amt))
                    print("Total:        ${:10,.2f}".format(total))
                #endregion
            #endregion

            #region [6] check alphabet 
                # the string to see if it is a letter or not. If the character is a
                # letter, that letter is added to the end of the string variable
                # "forwards" and to the beginning of the string variable "backwards".
                def mirrored_string(my_string):
                    forwards = ""
                    backwards = ""
                    for character in my_string:
                        if character.isalpha():
                            forwards += character
                            backwards = character + backwards

                    if forwards.lower() == backwards.lower():
                        return True
                    return False
                
                print(mirrored_string("12 Noon")) #True
                print(mirrored_string("Was it a car or cat I saw")) #False
                print(mirrored_string("'eve, Madam Eve")) #True
            #endregion

            #region [7] convert weight 
                # This function converts measurement equivalents. Output is formatted 
                # as, "x ounces equals y pounds", with y limited to 2 decimal places. 
                def convert_weight(ounces):
                    pounds = ounces/16 
                    result = "{} ounces equals {:.2f} pounds".format(ounces,pounds)
                    return result


                print(convert_weight(12)) # Should be: 12 ounces equals 0.75 pounds
                print(convert_weight(50.5)) # Should be: 50.5 ounces equals 3.16 pounds
                print(convert_weight(16)) # Should be: 16 ounces equals 1.00 pounds
            #endregion

            #region [8] username 
                # This function generates a username using the first 3 letters of a
                # user’s last name plus their birth year. 
                def username(last_name, birth_year):
                    return("{}{}".format(last_name[0:3],birth_year))

                print(username("asdf", "1985")) # Should display "asdf985" 
                print(username("asdf", "2000")) # Should display "asdf2000" 
            #endregion

            #region [9] replace_date
                # Check if the given "old_date" appears at the end of the given 
                # string variable "schedule". 
                if schedule.endswith(old_date):
                    p = len(old_date)
                    new_schedule = schedule[:-p] + schedule[-p:].replace(old_date, new_date)
                    return new_schedule
                return schedule
            
                print(replace_date("report will be released in March 2023", "2023", "2024")) #"report will be released in March 2024"
            #endregion
        #endregion

        #region[4] string methods
            "Mountains".upper()
            "Mountains".lower()

            answer = "YES"
            if answer.lower() == "yes":
            print("User said yes")

            " yes ".strip() //yes

            "The number of times e occurs in this string is 4".count("e") //4

            "Forest".endswith("rest") //true

            "Forest".isnumeric() //false
            "12345".isnumeric() //true 

            int("12345") + int("54321")

            "...".join(["This", "is", "a", "phrase", "joined", "by", "triple", "dots"]) //This...is...a...phrase...joined...by...triple...dots
            "This is another example".split() //['This', 'is', 'another', 'example']
        #endregion
    #endregion

    #region [1] list
        #region [1] basic 
            x = ["Now", "we", "are", "cooking!"]
            type(x) #<class 'list'>
            print(x) #['Now', 'we', 'are', 'cooking!']
            len(x) #4
            "are" in x #true
            print(x[0]) #Now
            print(x[3]) #cooking!
            x[1:3] #['we', 'are']
            x[:2] #['Now', 'we']
            x[2:]: #['are', 'cooking!']
        #endregion

        #region [2] add to list 
            #region [1] append to last
                fruits = ["Pineapple", "Banana", "Apple", "Melon"]
                fruits.append("Kiwi")
                print(fruits) #['Pineapple', 'Banana', 'Apple', 'Melon', 'Kiwi']
            #endregion

            #region [2] insert in position|remove
                fruits = ["Pineapple", "Banana", "Apple", "Melon"]
                fruits.insert(0, "Orange")
                fruits.insert(25, "Peach")
                fruits.remove("Melon")
                print(fruits) #['Orange', 'Pineapple', 'Banana', 'Apple', 'Peach']
            #endregion

            #region [3] pop remove in position 0 index
                fruits = ["Pineapple", "Banana", "Apple", "Melon"]
                fruits.insert(0, "Orange")
                fruits.insert(25, "Peach")
                fruits.remove("Melon")
                fruits.pop(3) //todo edit here remove apple num 4
                print(fruits) #['Orange', 'Pineapple', 'Banana', 'Peach']
            #endregion

            #region [4] assign value 0 index
                fruits = ["Pineapple", "Banana", "Apple", "Melon"]
                fruits.insert(0, "Orange")
                fruits.insert(25, "Peach")
                fruits.remove("Melon")
                fruits.pop(3)
                fruits[2] = "Strawberry"
                print(fruits) #['Orange', 'Pineapple', 'Strawberry', 'Peach']
            #endregion
        #endregion

        #region [3] tuple
            #region [1] tuple basic
                #Tuples are like lists, since they can contain elements of any data type. But unlike lists, tuples are immutable. 
                #Tuples can be useful when we need to ensure that an element is in a certain position and will not change
                fullname = ('Grace', 'M', 'Hopper')

                def convert_seconds(seconds): //todo edit here tuple func
                    hours = seconds // 3600
                    minutes = (seconds - hours * 3600) // 60
                    remaining_seconds = seconds - hours * 3600 - minutes * 60
                    return hours, minutes, remaining_seconds
                    result = convert_seconds(5000)
                    type(result) #tuple
                    print(result) #(1,23,20)
                    hours, minutes, seconds = result //todo edit here
                    print(hours, minutes, seconds) # 1 23 20
                    hours, minutes, seconds = convert_seconds(1000) //fix edit here
                print(hours, minutes, seconds) #0 16 40
            #endregion

            #region [2] ex  
                #region [1] for tuple 
                    animals = ["Lion", "Zebra", "Dolphin", "Monkey"]
                    chars = 0
                    for animal in animals:
                    chars += len(animal)

                    print("Total characters: {}, Average length: {}".format(chars, chars/len(animals))) #Total characters: 22, Average length: 5.5
                #endregion

                #region [2] for enum tuple 
                    winners = ["Ashley", "Dylan", "Reese"]
                    for index, person in enumerate(winners): //todo edit here enum make tuple for number and string
                        print("{} - {}".format(index + 1, person))
                        # 1 - Ashley
                        # 2 - Dylan
                        # 3 - Reese
                        #The enumerate() function takes a list as a parameter and returns a tuple for each element in the list
                #endregion

                #region [3] list of tuple loop 
                    def full_emails(people):
                        result = []
                        for email, name in people:
                            result.append("{} <{}>".format(name, email))
                        return result
                        print(full_emails([("alex@example.com", "Alex Diego"), ("shay@example.com", "Shay Brandt")]))

                    #['Alex Diego <alex@example.com>', 'Shay Brandt <shay@example.com>']
                #endregion
            #endregion
        #endregion
    #endregion
#endregion