#region [1] iti
	#region [1] start  
		#region[1] git
			git init
			git add .
			git commit -m "Initial commit"
			git remote add origin  https://github.com/MostafaMohamedTaha/0137ngTask.git
			git push -u origin master

			git branch feature1
			git checkout -b feature1
			git push -u origin feature1

			git checkout main
			git merge feature1
			git push origin main
		#endregion
		
		#region[2] make module
			ng g c components/chart
			ng g c components/cart
			ng g c components/table
			ng g c components/copy

			ng g m auth --route auth --module app.module
			ng g m analytics --route analytics --module app.module

			ng g c auth/component/login --module auth
			ng g c auth/component/signUp --module auth
		#endregion

		#region[3] app routing - auth routing - auth module
			const routes: Routes = [
				{path:'',component:HomeComponent},
				{ path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) },
				{ path: 'analytics', loadChildren: () => import('./analytics/analytics.module').then(m => m.AnalyticsModule) }
			];

			const routes: Routes = [
				{ path: '', component: AuthComponent },
				{ path: 'login', component: LoginComponent },
				{ path: 'signUp', component: SignUpComponent },
			];

			@NgModule({
			declarations: [
				AuthComponent,
				LoginComponent,
				SignUpComponent
			],
			imports: [
				CommonModule,
				AuthRoutingModule
			]
			})
		#endregion

		#region[4] start flowbite [install]
			#region [1] install 
				ng new task1 --no-standalone
				npm install tailwindcss --save-dev
				npx tailwindcss init
				npm install flowbite
			#endregion

			#region [2] style.css
				@tailwind base;
				@tailwind components;
				@tailwind utilities;
			#endregion

			#region [3] tailwind.config.js
				/** @type {import('tailwindcss').Config} */
				module.exports = {
				content: [
					"./src/**/*.{html,ts}",
					"./node_modules/flowbite/**/*.js" // add this line
				],
				theme: {
					extend: {},
				},
				plugins: [
					require('flowbite/plugin')
				],
				}
			#endregion

			#region [4] app.component.ts
				import { Component } from '@angular/core';
				import { OnInit } from '@angular/core';
				import { initFlowbite } from 'flowbite';

				@Component({
				selector: 'app-root',
				templateUrl: './app.component.html',
				styleUrls: ['./app.component.css']
				})
				export class AppComponent implements OnInit {
					title = 'web-app';

					ngOnInit(): void {
						initFlowbite();
					}
				}
			#endregion
		#endregion

		#region [1] use bootstrap
			#region [1] install
				npm install bootstrap
				npm install bootstrap-icons
			#endregion

			#region [2] angular.json 
				"styles": [
				"src/styles.css",
				"./node_modules/bootstrap/dist/css/bootstrap.min.css",
              	"./node_modules/bootstrap-icons/font/bootstrap-icons.min.css"
				]

				"scripts": [
				"./node_modules/bootstrap/dist/js/bootstrap.min.js"
				]
			#endregion
		#endregion

		#region[5] icons
			#region[1] module imports
				npm i @ng-icons/core
				npm i @ng-icons/bootstrap-icons @ng-icons/css.gg
				NgIconsModule.withIcons({ bootstrapCart4, bootstrapTrash3, bootstrapInfoCircleFill,bootstrapList,cssAdd}),
			#endregion

			#region [2] html 
				<button
					class="text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800"
					(click)="buy(prd.price,itemCount.value)">
					<ng-icon name="bootstrapCart4"></ng-icon>
				</button>
				<button
					class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 mx-3">
					<ng-icon name="bootstrapInfoCircleFill"></ng-icon>
				</button>
				<button
					class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
					<ng-icon name="bootstrapTrash3"></ng-icon>
				</button>
			#endregion
		#endregion

		#region[6] structure
			components
			ng g c home 
			ng g c productList
			ng g c cart
			ng g c order

			shared
			ng g c header
			ng g c footer
			ng g c sidebar

			view
			ng g class data

			models
			ng g i iproduct

			directive
			ng g directive lightbox

			pipe
			ng g pipe usdToEgp

			services
			ng g s product
		#endregion
	#endregion

	#region [2] product
		#region[1] product cart 2
			#region class static binding
				ng g class data
				export class CartData {
					constructor(
						public name:string,
						public imgUrl:string,
						public description:string,
						public rating:number,
						public price:number,
						public branches:string[]){
					}
				}
				cartDataDetail!:CartData
					https: any;
					constructor(){
					this.cartDataDetail=new CartData('pq','https://picsum.photos/2000/1100','d1',4,1000,['cairo','alex'])
					}

				<a href="#">
				<img class="rounded-t-lg" [src]="cartDataDetail.imgUrl" alt="product image" />
				</a>
			#endregion
		#endregion

		#region[2] productlist 3
			#region [1] ts

				import { HttpClientModule } from '@angular/common/http'

				prdList!:IProducts[]
				catList!:ICategory[]
				totalPrice!:number
				selectedCatId:number=0
				dateNow!:Date
				constructor(){
					this.prdList=[
					{id:1,name:'p1',price:100,quantity:1,imgUrl:'https://picsum.photos/2000/1100',categoryId:1},
					{id:2,name:'p2',price:110,quantity:2,imgUrl:'https://picsum.photos/2000/1200',categoryId:2},
					{id:3,name:'p3',price:120,quantity:0,imgUrl:'https://picsum.photos/2000/1300',categoryId:3},
					{id:4,name:'p4',price:130,quantity:4,imgUrl:'https://picsum.photos/2000/1400',categoryId:4},
					{id:5,name:'p5',price:140,quantity:5,imgUrl:'https://picsum.photos/2000/1500',categoryId:5},
					{id:6,name:'p6',price:150,quantity:6,imgUrl:'https://picsum.photos/2000/1600',categoryId:6},
					]
					this.catList=[
					{id:1,name:'c1'},
					{id:2,name:'c2'},
					{id:3,name:'c3'},
					{id:4,name:'c4'},
					]
					this.dateNow=new Date()
				}
				buy(prdPrice:number,count:any){
					this.totalPrice=+count*prdPrice
				}
			#endregion

			#region[2] html
				<td class="px-6 py-4">
					<div class="flex items-center">
						<div>
							<input type="number" id="first_product"
								class="bg-gray-50 w-14 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block px-2.5 py-1 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
								placeholder="0" [(ngModel)]="itemCount.value"  #itemCount required>
						</div>
					</div>
				</td>

				<td class="px-6 py-4 text-center">
					<div *ngIf="prd.quantity!=0;else elseBlock" #itemCount>
						{{prd.quantity}}
					</div>
					<ng-template #elseBlock>
						hidden
					</ng-template>
				</td>
			#endregion
			
			#region[3] cat
				<select name="cat" id="cat"
					class=" grid justify-center my-3 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500  w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
						<option *ngFor="let cat of catList" [value]="cat.id" #cat [(ngModel)]="selectedCatId">
							{{cat.name}}
						</option>
					</select>
			#endregion
		#endregion
	#endregion

	#region [3] directive|pipe|lifeCycle
		#region[1] directives 
			@Directive({
			selector: '[appLightbox]'
			})
			export class LightboxDirective {
			@Input() defaultColor:string='blue'
			@Input() hoverColor:string='green'
			constructor(private elRef: ElementRef) {
				this.elRef.nativeElement.style.border=`2px solid ${this.defaultColor}`
			}
			@HostListener('mouseover') onMouseOver(){
				this.elRef.nativeElement.style.border=`2px solid ${this.hoverColor}`
			}
				@HostListener('mouseout') onMouseOut(){
					this.elRef.nativeElement.style.border=`2px solid ${this.defaultColor}`
				}
			}

			<td class="p-4">
			</td>
		#endregion

		#region[2] pipes 
			@Pipe({
			name: 'usdToEgp'
			})
			export class UsdToEgpPipe implements PipeTransform {

			transform(value: number): number {
				return value*55;
			}

			}

			<td class="px-6 py-4 font-semibold text-gray-900 dark:text-white">
				{{prd.price |usdToEgp |currency :'EGP':'symbol'}}
			</td>
			<td class="px-6 py-4 font-semibold text-gray-900 dark:text-white">
				{{totalPrice |usdToEgp |currency :'EGP':'symbol'}}
			</td>
		#endregion 

		#region[3] life cycle 
			constructor
			ngOnChanges
			ngOnInit
			ngDoCheck
				ngAfterContentInit
				ngAfterContentChecked
					
				ngAfterViewInit
				ngAfterViewChecked
			ngOnDestroy
		#endregion
	#endregion

	#region[4] interaction|service
		#region [1] interaction 
			#region[1] without input output
				import { FormsModule } from '@angular/forms';
				<select name="cat" id="cat"
					class=" grid justify-center my-3 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500  w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
					(change)="filterByCat()" [(ngModel)]="selectedCatId" >
					<option *ngFor="let cat of catList" [value]="cat.id" #cat >
						{{cat.name}}
					</option>
				</select>
				<div>
					<span class="bg-green-100 text-green-800 text-sm font-medium me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">date : {{dateNow | date:'longDate'}}</span>
				</div>

				<ng-container *ngFor="let prd of prdListOfCat; let i=index">

				catList!: ICategory[]
				totalPrice!: number
				selectedCatId!: number
				filterByCat() {
					this.prdListOfCat = this.prdList.filter(prd => prd.categoryId == this.selectedCatId) //value of catList.id
				}
			#endregion

			#region[2] with input output
				#region[1] input parent master child list
					#region[1] Parent
						selectedCatId: number=0;
						catList!: ICategory[];
						sentCatId!: number;

						constructor() { 
							this.catList = [
							{ id: 100, name: 'c1' },
							{ id: 200, name: 'c2' },
							{ id: 300, name: 'c3' },
							{ id: 400, name: 'c4' },
							]
						}
						<select name="cat" id="cat"
							class=" grid justify-center my-3 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500  w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							[(ngModel)]="selectedCatId">  //selectedCatId =>fill html parent
							
							<option *ngFor="let cat of catList" [value]="cat.id" #cat>
								{{cat.name}}
							</option>
						</select>
					#endregion

					#region[2] child
						selectedCatId: number=0;
						@Input() sentCatId!:number // send catId Empty in child
							ngOnChanges(): void {
									this.filterByCat()
								}
								private filterByCat() {
									this.prdListOfCat = this.prdList.filter(prd => prd.categoryId == this.sentCatId)
								}
					#endregion

					#region [3] html child inside parent html
						<app-product-list [sentCatId]="selectedCatId"/>
					#endregion
				#endregion

				#region[2] filter with input
					#region [1] output
						//((((((((((((((total price is child of productlist))))))))))))))
						@Output() totalPriceChanged!:EventEmitter<number> 
							totalPrice:number=0
						constructor(){this.totalPriceChanged = new EventEmitter<number>()}

						buy(prdPrice: number, count: any) {
							this.totalPrice += +count * prdPrice
							this.totalPriceChanged.emit(this.totalPrice)
						}
					#endregion

					#region[2] html
						<div>
							<input type="number" id="first_product"
								class="bg-gray-50 w-14 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block px-2.5 py-1 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
								placeholder="0" [(ngModel)]="Count.value" #Count required>
						</div>
						<button
							class="text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800"
							(click)="buy(i.price,Count.value)">
							<ng-icon name="bootstrapCart4"></ng-icon>
						</button>
					#endregion

					#region [3] productlist of parent category 
						selectedCatId:number=0
						receiveOrderTotalPrice!:number

					#region[3]
						onTotalPriceChange(totalPrice: number) {
							this.receiveOrderTotalPrice=totalPrice
						}
					#endregion

					#region [4] html of parent 
						<app-product-list [sentCatId]="selectedCatId" (totalPriceChanged)="onTotalPriceChange($event)"/>
					#endregion
				#endregion
			#endregion

			#region[3] viewChild //wanna work
				@ViewChild(ProductListComponent) productListObj!:ProductListComponent
				clg =>parent
			#endregion
		#endregion

		#region[2] services 
			#region[1] crud
				prdList!: IProducts[]
				constructor() {
					this.prdList = [
					{ id: 1, name: 'p1', price: 100, quantity: 1, imgUrl: 'https://picsum.photos/2000/1100', categoryId: 1 },
					{ id: 2, name: 'p2', price: 110, quantity: 2, imgUrl: 'https://picsum.photos/2000/1200', categoryId: 2 },
					{ id: 3, name: 'p3', price: 120, quantity: 0, imgUrl: 'https://picsum.photos/2000/1300', categoryId: 3 },
					{ id: 4, name: 'p4', price: 130, quantity: 4, imgUrl: 'https://picsum.photos/2000/1400', categoryId: 4 },
					{ id: 5, name: 'p5', price: 140, quantity: 5, imgUrl: 'https://picsum.photos/2000/1500', categoryId: 1 },
					{ id: 6, name: 'p6', price: 150, quantity: 6, imgUrl: 'https://picsum.photos/2000/1600', categoryId: 1 },
					]
				}
				getAll(): IProducts[] {
					return this.prdList
				}
				getAllByCatId(catId: number): IProducts[] {
					if (catId == 0)
					return this.prdList
					else
					return this.prdList.filter(prd => prd.categoryId == catId)
				}
				getById(id: number): IProducts | null {

					let foundPrd = this.prdList.find(prd => prd.id == id)
					return foundPrd ? foundPrd : null
				}
				add(prd:IProducts){
					this.prdList.push(prd)
				}
			#endregion
			
			#region[2] afterCrud

				// prdList!: IProducts[] // sent to service
				prdListOfCat: IProducts[] = []
				catList!: ICategory[]
				totalPrice: number = 0
				@Input() sentCatId!: number
				dateNow!: Date
				@Output() totalPriceChanged!: EventEmitter<number>
				constructor(private productService: StaticProductsService,private router:Router) {
					// this.prdList = [
					//   { id: 1, name: 'p1', price: 100, quantity: 1, imgUrl: 'https://picsum.photos/2000/1100', categoryId: 1 },
					//   { id: 2, name: 'p2', price: 110, quantity: 2, imgUrl: 'https://picsum.photos/2000/1200', categoryId: 2 },
					//   { id: 3, name: 'p3', price: 120, quantity: 0, imgUrl: 'https://picsum.photos/2000/1300', categoryId: 3 },
					//   { id: 4, name: 'p4', price: 130, quantity: 4, imgUrl: 'https://picsum.photos/2000/1400', categoryId: 4 },
					//   { id: 5, name: 'p5', price: 140, quantity: 5, imgUrl: 'https://picsum.photos/2000/1500', categoryId: 1 },
					//   { id: 6, name: 'p6', price: 150, quantity: 6, imgUrl: 'https://picsum.photos/2000/1600', categoryId: 1 },
					// ]
					this.dateNow = new Date()
					this.totalPriceChanged = new EventEmitter<number>()
				}
				ngOnChanges(): void {
					// this.filterByCat()
					this.prdListOfCat = this.productService.getAllByCatId(this.sentCatId)
				}
				ngOnInit(): void {
					// this.prdListOfCat=this.prdList
					this.prdListOfCat = this.productService.getAll()
				}
				buy(prdPrice: number, count: any) {
					this.totalPrice += +count * prdPrice
					this.totalPriceChanged.emit(this.totalPrice)
				}
				showDetails(pid: number) {
					this.router.navigate(['/products',pid])
				}
				// private filterByCat() {
				//   // this.prdListOfCat = this.prdList.filter(prd => prd.categoryId == this.sentCatId)
				// }
			#endregion
		#endregion
		#endregion
	#endregion

	#region[5] routing 
		#region [1] app-routing
			[routerLink]="['']" [routerLinkActive]="['text-green-500']"
			[routerLinkActiveOptions]="{exact:true}"

			const routes: Routes = [
				{path:'',component:MainLayoutComponent,children:[
					{path:'',redirectTo:'/home',pathMatch:'full'},
					{path:'home',component:HomeComponent},
					{path:'products',component:ProductListComponent},
					{path:'products/:pid',component:ProductDetailsComponent},
					{path:'order',component:OrderMasterComponent},
				]},
				{path:'login',component:LoginComponent},
				{path:'register',component:RegisterComponent},
				{path:'**',component:NotFoundError}
			];
		#endregion

		#region[2] activatedRoute
			{path:'products/:pid',component:ProductDetailsComponent},
			import { Location } from '@angular/common'

			currPrdId!: number
			prd!: IProducts | null
			prdIdsList: number[] = []
			constructor(
				private activateRoute: ActivatedRoute
				, private prdService: StaticProductsService
				, private router: Router
				, private location: Location) { }

			goBack() {
				this.location.back()
				this.prd = this.prdService.getById(this.currPrdId)
			}
			#region buttons
				<div class="flex justify-center my-3">
					<!-- Previous Button -->
					<button class="flex items-center justify-center h-8 px-3 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						(click)="goPrev()" [disabled]="currPrdId==prdIdsList[0]">
						Previous
					</button>
					<a class="flex items-center justify-center h-8 px-3 mx-3 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						(click)="goBack()">
						go back
					</a>

					<!-- Next Button -->
					<button  class="flex items-center justify-center h-8 px-3 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						(click)="goNext()" [disabled]="currPrdId==prdIdsList[prdIdsList.length-1]">
						Next
					</button>
				</div>
			#endregion

			#region onInit
				ngOnInit(): void {
					this.currPrdId = Number(this.activateRoute.snapshot.paramMap.get('pid'))
					// this.prd=this.prdService.getById(this.currPrdId)
					this.prdIdsList = this.prdService.getPrdIds()
					this.prd = this.prdService.getById(this.currPrdId)
					this.activateRoute.paramMap.subscribe(x => this.currPrdId = Number(x.get('pid')))
				}
			#endregion

			#region go
					getPrdIds(): number[] {
						return this.prdList.map(x=>x.id)
					}
				goPrev() {
					let currentIndex = this.prdIdsList.findIndex(x => x == this.currPrdId)
					let prevIndex
					if (currentIndex > 0) {
						prevIndex = this.prdIdsList[currentIndex - 1]
						this.router.navigate(['/products', prevIndex])
						this.prd = this.prdService.getById(this.currPrdId)
					}
				}
				goNext() {
					let currentIndex = this.prdIdsList.findIndex(x => x == this.currPrdId)
					let nextIndex
					if (currentIndex < this.prdIdsList.length) {
					nextIndex = this.prdIdsList[currentIndex + 1]
					this.router.navigate(['/products', nextIndex])
					this.prd = this.prdService.getById(this.currPrdId)
					}
				}
			#endregion
		#endregion

		#region[3] html mainLayoutPage
			<router-outlet />
		#endregion

		#region[4] app-component
			<app-header/>
			<app-sidebar class="flex justify-center"/>
			<router-outlet />
			<app-footer/>
		#endregion
	#endregion

	#region [6] rxjs
		#region[1] rxjs 
			#region[1] add service
				ng g s ad
			#endregion

			#region[2] ad-services
				private adsList!: string[]
				constructor() {
					this.adsList = [
					"big discounts",
					"sale up to 50%",
					"friday offers",
					"",
					"special Offer"
					]
				}
				getAds(adsInSec: number): Observable<string> {
					return new Observable<string>(x => {
					// x.next();x.error();x.complete()
					let counter = 0
					let adsTimer = setInterval(() => {
						if (counter == this.adsList.length) {
						x.complete()
						}
						else if (this.adsList[counter] == '') {
						x.error('empty ads')
						}
						else {
						x.next(this.adsList[counter])
						counter++
						}
					}, adsInSec * 1000)
					})
				}
			#endregion

			#region[3] service inject
				private Subscription!:Subscription
				constructor(private ads:AdsService){}

				ngOnInit(): void {
						this.Subscription=this.ads.getAds(3).subscribe(
							{
								next:x=>console.log(x),
								error:err=>console.log(err),
								complete:()=>{console.log('complete')}
							}
						)
					}
					ngOnDestroy(): void {
						this.Subscription.unsubscribe()
					}
			#endregion
		#endregion

		#region[2] operators 11
			https://reactivex.io/documentation/operators.html

			#region service
				getSerialAds():Observable<string>{
					return from(this.adsList) // from database list
					// return of("a","b","c") // of this objects
				}
			#endregion

			#region home
				ngOnInit(): void {
					// let sub=this.ads.getAds(3).subscribe(
					//   {
					//     next:x=>console.log(x),
					//     error:err=>console.log(err),
					//     complete:()=>{console.log('complete')}
					//   }
					// )
					// this.Subscription.push(sub)
					// let sub =this.ads.getSerialAds().subscribe(x=>{
					//   console.log(x)
					// })
					// this.Subscription.push(sub)
					//pipe return observable could make subscribe after finish
					// let filterAds=this.ads.getAds(3).pipe(
					//   filter(x=>x.includes("friday")),
					//   map(x=>"ad:--"+x)
					// )
					// let subFilter=filterAds.subscribe(
					//   {
					//     next:x=>console.log(x),
					//     error:err=>console.log(err),
					//     complete:()=>{console.log('complete')}
					//   }
					// )
					// this.Subscription.push(subFilter)
					let filterObs=this.ads.getAds(3).pipe(
					retry(3),
					catchError((err, caught) => caught),
					take(30)
					)
					let adsShow=filterObs.subscribe(
							{
								next:x=>console.log(x),
								error:err=>console.log(err),
								complete:()=>{console.log('complete')}
							}
					)
					this.Subscription.push(adsShow)
				}
				getSerialAds():Observable<string>{
					return from(this.adsList)
					// return of("a","b","c")
				}
			#endregion
		#endregion

		#region[3] subject (observable,observer) 12
			#region subject types
				publish subject =>default
				replay =>start from first subscriber
				behavior =>start from the the last observable next to that observable
			#endregion

			#region services
			login(username:string,password:string){
					let token='1234'
					localStorage.setItem('token',token)

				}
				logout(){
					localStorage.removeItem('token')
				}
				get isUserLogged():boolean{
					if(localStorage.getItem('token')){
					return true
					}
					return false
				}
			#endregion

			#region login ts
				private isLoggedSub!:BehaviorSubject<boolean>
				
				constructor() { 
					this.isLoggedSub=new BehaviorSubject<boolean>(false)
				}
				
				login(username:string,password:string){
					let token='1234'
					localStorage.setItem('token',token)
					this.isLoggedSub.next(true)

				}
				logout(){
					localStorage.removeItem('token')
					this.isLoggedSub.next(false)
				}
				get isUserLogged():boolean{
					return localStorage.getItem('token')?true:false
				}
				isLoggedSubject():Observable<boolean>{
					return this.isLoggedSub
				}
			#endregion

			#region login html
				<li [hidden]="!isLogged"> 
					<div [routerLink]="['/login']" [routerLinkActive]="['text-green-500']" [hidden]="!isLogged"
						class="block px-3 py-2 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700">login</div>
				</li>
				<li [hidden]="isLogged">
					<div [routerLink]="['/logout']" [routerLinkActive]="['text-green-500']" [hidden]="isLogged"
						class="block px-3 py-2 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700 focus:border-2" >logout</div>
				</li>
			#endregion
		#endregion
	#endregion

	#region [7] guard|http client
		#region[1] guard 13
			#region [1] install

				ng g g auth --functional=false

				{path:'products/:pid',component:ProductDetailsComponent,canActivate:[AuthGuard]},
			#endregion

			#region[2] AuthGuard 
				export class AuthGuard implements CanActivate {
				constructor(private auth: AuthService, private router: Router) { }
					canActivate(
						route: ActivatedRouteSnapshot,
						state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
						if (this.auth.isUserLogged) {
						return true
						} else {
						alert("not logged")
						this.router.navigate(['/login'])
						return false
						}
					}

				}
			#endregion
		#endregion

		#region[2] httpClient 14
			#region[1] ngModel
				import {  HttpClientModule } from '@angular/common/http';
				HttpClientModule
			#endregion

			#region[2] install
				npm i -g json-server
				npm i json-server
				json-server --watch db.json
			#endregion

			#region[3] db.json make it like this
				{
					"products": [
						{
							"id": 1,
							"name": "p1",
							"price": 100,
							"quantity": 1,
							"imgUrl": "https://picsum.photos/2000/1100",
							"categoryId": 1
						},
						{
							"id": 2,
							"name": "p2",
							"price": 110,
							"quantity": 2,
							"imgUrl": "https://picsum.photos/2000/1200",
							"categoryId": 2
						},
						{
							"id": 3,
							"name": "p3",
							"price": 120,
							"quantity": 0,
							"imgUrl": "https://picsum.photos/2000/1300",
							"categoryId": 3
						},
						{
							"id": 4,
							"name": "p4",
							"price": 130,
							"quantity": 4,
							"imgUrl": "https://picsum.photos/2000/1400",
							"categoryId": 4
						},
						{
							"id": 5,
							"name": "p5",
							"price": 140,
							"quantity": 5,
							"imgUrl": "https://picsum.photos/2000/1500",
							"categoryId": 1
						},
						{
							"id": 6,
							"name": "p6",
							"price": 150,
							"quantity": 6,
							"imgUrl": "https://picsum.photos/2000/1600",
							"categoryId": 1
						}
					],
					"category":[
						{"id":1,"name":"c1"},
						{"id":2,"name":"c2"},
						{"id":3,"name":"c3"},
						{"id":4,"name":"c4"}
					]
				}
			#endregion 

			#region[4] crud
				ng g environments
				
				export const environment = {
					production: false,
					apiLink:'https://dummyjson.com/products'
				};
				constructor(private http: HttpClient) { }
				get(): Observable<StaticProduct[]> {
					return this.http.get<StaticProduct[]>(`${environment.apiLink}/products`)
				}
				getCat(): Observable<ICategory[]> {
					return this.http.get<ICategory[]>(`${environment.apiLink}/category`)
				}
				getByCat(catId:number): Observable<StaticProduct[]> {
					return this.http.get<StaticProduct[]>(`${environment.apiLink}/products?categoryId=${catId}`)
				}
				getById(id:number): Observable<StaticProduct> {
					return this.http.get<StaticProduct>(`${environment.apiLink}/products/${id}`)
				}
				// add(newPrd:StaticProduct): Observable<StaticProduct> {
				//   return this.http.post<StaticProduct>(`${environment.apiLink}/products`)
				// }
				// edit(Prd:StaticProduct): Observable<StaticProduct> {
				//   return this.http.put<StaticProduct>(`${environment.apiLink}/products`)
				// }
				delete(): Observable<StaticProduct> {
					return this.http.delete<StaticProduct>(`${environment.apiLink}/products`)
				}
			#endregion

			#region[5] ts prdList
				constructor(
					private prd:PrdService,
					// private productService: ProductsService, 
					private router: Router) {
					this.dateNow = new Date()
					this.totalPriceChanged = new EventEmitter<number>()
				}
				ngOnChanges(): void {
					// this.prdListOfCat = this.productService.getAllByCatId(+this.sentCatId)
					this.prd.getByCat(+this.sentCatId).subscribe(x=>this.prdListOfCat=x)
				}
				ngOnInit(): void {
					this.prd.get().subscribe(x=>this.prdListOfCat=x)
				}
			#endregion

			#region[6] handleError
				post method
				add(newPrd: StaticProduct): Observable<StaticProduct> {
					return this.http
					.post<StaticProduct>(`${environment.apiLink}/products`, JSON.stringify(newPrd), this.headerOpt)
					.pipe(
						retry(2),
						catchError(
						//   (x) => {
						//   return throwError(() => new Error(x))
						// }
						this.handleError
						)
					)
				}
				private handleError(x:HttpErrorResponse){
					if(x.error===0){
					console.error(x.error)
					}else{
					console.error(`error status${x.status} and error is`,x.error)
					
					}
					return throwError(() => new Error('error exist')) 
				}

				get(): Observable<StaticProduct[]> {
					return this.http.get<StaticProduct[]>(`${environment.apiLink}/products`)
					.pipe(
					retry(2),
					catchError(this.handleError)
					)
				}

				headerOpt;
				constructor(private http: HttpClient) {
						this.headerOpt = {
						headers: new HttpHeaders({
							'Content-Type': 'application/json'
						})
					}
				}
			#endregion

			#region[7] add product with toaster ts
				showToaster:boolean=false
				constructor(private prd:PrdService,private route:Router){}

				addProduct(){
					const prd1:StaticProduct={
					id: 100,
					name: 'p100',
					price: 100,
					quantity: 1,
					imgUrl: 'https://picsum.photos/2000/1100',
					categoryId: 1
					}
					this.prd.add(prd1).subscribe(x=>{
					this.showToaster=true
					setTimeout(() => {
						this.showToaster = false;
						this.route.navigateByUrl('/products')
					}, 5000);
					return x
					})
				}
			#endregion

			#region[8] toaster
				<div id="toast-interactive" *ngIf="showToaster" class="w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:bg-gray-800 dark:text-gray-400" role="alert">
					<div class="flex">
						<div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:text-blue-300 dark:bg-blue-900">
							<svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
								<path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 1v5h-5M2 19v-5h5m10-4a8 8 0 0 1-14.947 3.97M1 10a8 8 0 0 1 14.947-3.97"/>
							</svg>
							<span class="sr-only">Refresh icon</span>
						</div>
						<div class="text-sm font-normal ms-3">
							<span class="mb-1 text-sm font-semibold text-gray-900 dark:text-white">Update available</span>
							<div class="mb-2 text-sm font-normal">A new software version is available for download.</div> 
							<div class="grid grid-cols-2 gap-2">
								<div>
									<a href="#" class="inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800">Update</a>
								</div>
								<div>
									<a href="#" class="inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 dark:bg-gray-600 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">Not now</a> 
								</div>
							</div>    
						</div>
						<button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white items-center justify-center flex-shrink-0 text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-interactive" aria-label="Close">
							<span class="sr-only">Close</span>
							<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
								<path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
							</svg>
						</button>
					</div>
				</div>

				
				<button type="submit" (click)="addProduct()"
					class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
					Register new account
				</button>
			#endregion

			#region[9] generic crud and generic response
				no implementation
			#endregion
		#endregion	
	#endregion

	#region[8] form 15
		#region[1] template driven
			directive,mutable (allow change),async,static
		#endregion

		#region[2] class ng
			touched untouched | dirty pristine | valid invalid
		#endregion

		#region[3] reactive form
			ReactiveFormsModule //imports

			#region[1] html reactive form
				<form class="max-w-sm mx-auto" [formGroup]="register">
					<div class="mb-5">
						<label for="fullName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Full Name</label>
						<input type="text" id="fullName" name="fullName" formControlName="fullName"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Full Name" required />
					</div>

					<div class="mb-5">
						<label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
						<input type="email" id="email" name="email" formControlName="email"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Full Name" required />
					</div>

					<div class="mb-5" formGroupName="address">
						<div>
							<label for="city" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">City</label>
							<input type="text" id="city" name="city" formControlName="city"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
								placeholder="Please Enter Your city" required />
						</div>
						<div>
							<label for="postalCode" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Postal Code</label>
							<input type="text" id="postalCode" name="postalCode" formControlName="postalCode"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
								placeholder="Please Enter Your Postal Code" required />
						</div>
						<div>
							<label for="street" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Street</label>
							<input type="text" id="street" name="street" formControlName="street"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
								placeholder="Please Enter Your Street" required />
						</div>
					</div>

					<div class="mb-5">
						<label for="phoneNumber" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Phone Number</label>
						<input type="number" id="phoneNumber" name="phoneNumber" formControlName="phoneNumber"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Phone Number" required />
					</div>

					<div class="mb-5">
						<label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
						<input type="password" id="password" name="password" formControlName="password"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Password" required />
					</div>

					<div class="mb-5">
						<label for="confirmPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Confirm Password</label>
						<input type="password" id="confirmPassword" name="confirmPassword" formControlName="confirmPassword"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Password" required />
					</div>

					<div class="flex items-start mb-5">
						<div class="flex items-center h-5">
							<input id="remember" type="checkbox" value=""
								class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800"
								required />
						</div>
						<label for="remember" class="text-sm font-medium text-gray-900 ms-2 dark:text-gray-300">Remember me</label>
					</div>

					<button type="submit"
						class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
						Submit
					</button>
				</form>

				<div class="flex justify-center text-violet-500">
					{{register.value | json}}
					<div class="grid text-red-500">

						{{register.get('fullName')?.errors | json}}
					</div>
				</div>
			#endregion

			#region[2] ts reactive form before formBuilder
				register!:FormGroup;
				constructor(){
					this.register=new FormGroup(
					{
						fullName:new FormControl('',[Validators.required,Validators.pattern('[A-Za-z]{3}')]),
						email:new FormControl(''),
						phoneNumber:new FormControl(''),
						address:new FormGroup({
						city:new FormControl(''),
						postalCode:new FormControl(''),
						street:new FormControl('')
						}),
						password:new FormControl(''),
						confirmPassword:new FormControl(''),

					}
					)
				}
			#endregion

			#region[3] reactive form after formBuilder ts
				constructor(private registerService: FormBuilder) {

					this.register = registerService.group(
					{
						fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3}')]],
						email: ['',[Validators.required]],
						phoneNumber: [''],
						address: registerService.group({
						city: [''],
						postalCode: [''],
						street: [''],
						}),
						password: [''],
						confirmPassword: [''],
					}
					)
				}
			#endregion

			#region[4] get method html vs ts
				{{register.get('fullName')?.errors | json}} 

				//in ts 

				get fullName(){
					return this.register.get('fullName')
				}

				{{fullName?.errors | json}}
			#endregion

			#region[5] fill 
				fillForm() {
					this.register.patchValue( //all value ,.patchValue some values
					{
						fullName: "iti",
						email: "mostafamohamedtaha.udemy@gmail.com",
						address: {
						city: "cairo",
						postalCode: "123123",
						street: "nasr"
						}
					}
					)
				}

				<button (click)="fillForm()"
					class="mx-2 text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
					auto fill form
				</button>
			#endregion

			#region[6] submit 
				submit() {
					let registerUser: IUser = this.register.value as IUser
					console.log(registerUser)
				}
				<form class="grid grid-cols-4" [formGroup]="register" (ngSubmit)="submit()">
			#endregion

			#region[7] add multi numbers
				get phoneNumbers() {
					return this.register.get('phoneNumber') as FormArray
				}
				addNumber(event: any) {
					this.phoneNumbers.controls.push(this.registerService.control(''));
					event.target?.classList.add('hidden')
				}

				<div formArrayName="phoneNumber" class="mb-5" *ngFor="let phoneNumber of phoneNumbers.controls;let i=index">
					<label for="{{'phoneNumber'+i+1}}" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
						phone number # {{i+1}}
					</label>

					<input type="number" id="{{'phoneNumber'+i+1}}" name="{{'phoneNumbers'+i}}" [formControlName]="i"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Phone Number" required />

					<button (click)="addNumber($event)"
						class="my-2 text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800">
						+
					</button>
				</div>
			#endregion

			#region[8] model after referral
				export interface IUser {
					fullName:string
					email:string
					phoneNumber:string[]
					address:{
						city:string
						postalCode:string
						street:string
					}
					password:string
					referral:string[]
					referralOther:string[]
				}
			#endregion

			#region[9] validator after referral
				this.register = registerService.group(
					{
					fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
					email: ['', [Validators.required]],
					phoneNumber: registerService.array(['']),
					address: registerService.group({
						city: [''],
						postalCode: [''],
						street: [''],
					}),
					password: [''],
					confirmPassword: [''],
					referral:[''],
					referralOther:[
						'',
						[Validators.required, Validators.pattern('[A-Za-z]{3,}')] 
					],
					}
				)
			#endregion

			#region[10] referral radio html
				<div class="flex justify-center my-3">
					<div class="flex items-center me-4" >
						<input id="referral1" type="radio" value="socialMedia" name="referral" formControlName="referral"
							class="w-4 h-4 text-red-600 bg-gray-100 border-gray-300 focus:ring-red-500 dark:focus:ring-red-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" (change)="updateReferralValidator"> 
						<label for="red-radio" class="text-sm font-medium text-gray-900 ms-2 dark:text-gray-300">Social Media</label>
					</div>
					<div class="flex items-center me-4" >
						<input id="referral2" type="radio" value="friend" name="referral" formControlName="referral"
							class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" (change)="updateReferralValidator">
						<label for="green-radio" class="text-sm font-medium text-gray-900 ms-2 dark:text-gray-300">Friend</label>
					</div>
					<div class="flex items-center me-4" >
						<input checked id="referral3" type="radio" value="referralOther" name="referral" formControlName="referral"
							class="w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 focus:ring-purple-500 dark:focus:ring-purple-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" (change)="updateReferralValidator">
						<label for="purple-radio"
							class="text-sm font-medium text-gray-900 ms-2 dark:text-gray-300">referralOther</label>
					</div>
				</div>
				<div class="mb-5" *ngIf="referral?.value=='referralOther'">
					<label for="referralOther" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">referralOther</label>
					<input type="text" id="referralOther" name="referralOther" formControlName="referralOther"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Email" required />
				</div>
			#endregion

			#region[11] referral ts
				get referral() {
					return this.register.get('referral') 
				}
				get updateReferralValidator() {
				if(this.referral?.value=='referralOther'){
					this.register.get('referralOther')?.addValidators( [Validators.required, Validators.pattern('[A-Za-z]{3,}')])
				}else{
					this.register.get('referralOther')?.clearValidators()
				}
				return this.register.get('referralOther')?.updateValueAndValidity()
				}
			#endregion

			#region[12] ctor existMail
				register!: FormGroup;
				existUserEmail: string[] = []
				constructor(private registerService: FormBuilder) {
					this.existUserEmail = [
					"aaa@aaa.com",
					"bbb@bbb.com",
					"ccc@ccc.com",
					"ddd@ddd.com"
					]
					this.register = registerService.group(
					{
						fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
						email: ['', [Validators.required, this.existEmailValidator(this.existUserEmail)]],
						phoneNumber: registerService.array(['']),
						address: registerService.group({
						city: [''],
						postalCode: [''],
						street: [''],
						}),
						password: [''],
						confirmPassword: [''],
						referral: [''],
						referralOther: [
						'',
						[Validators.required, Validators.pattern('[A-Za-z]{3,}')]
						],
					}
					)
				}
			#endregion

			#region[13] existMail
				get email() {
					return this.register.get('email')
				}
				existEmailValidator(existEmails: string[]): ValidatorFn {
					return (control: AbstractControl): ValidationErrors | null => {
					let emailValue: string = control.value
					let validationError = {
						"existEmail": {
						"value": emailValue
						}
					}
					if (control.untouched && emailValue.length == 0)
						return null
					let foundEmail = existEmails.includes(emailValue)
					// return emailValue.includes('@')?null:validationError
					return foundEmail ? validationError : null
					}
				}
			#endregion

			#region[14] html existMail
				<div class="mb-5">
					<label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
					<input type="email" id="email" name="email" formControlName="email"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Email" required />
						<div [hidden]="email?.valid || email?.untouched">
							<div
								class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">
			
								<div class="text-sm font-medium ms-3" *ngIf="email?.errors?.['required']">
									Please Fill This Input
								</div>
								<!-- <div class="text-sm font-medium ms-3" *ngIf="email?.errors?.['emailNotValid'] ">
									Please Fill This Input at least 3 letters {{email?.errors?.['emailNotValid'].value }} not
									matching
								</div> -->
								<div class="text-sm font-medium ms-3" *ngIf="email?.errors?.['existEmail'] ">
									Please Fill This Input at least 3 letters {{email?.errors?.['existEmail'].value }} not
									matching
								</div>
							</div>
						</div>
				</div>
			#endregion

			#region[15] matchPassword
				import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';
				export function passwordMatch(complexPassword:boolean=false):ValidatorFn{
					return(control:AbstractControl):ValidationErrors|null=>{
						let passwordControl=control.get('password')
						let confirmPasswordControl=control.get('confirmPassword')
						// if(!passwordControl || !confirmPasswordControl || !passwordControl.value || !confirmPasswordControl.value)
						//     return null
						let valueError={
							unmatchedPassword:{
								"password":passwordControl?.value,
								"confirmPassword":confirmPasswordControl?.value
							}
						}
						return passwordControl?.value==confirmPasswordControl?.value?null:valueError
					}
				}
			#endregion

			#region[16] password ts
				get password(){
					return this.register.get('password')
				}
				get confirmPassword(){
					return this.register.get('confirmPassword')
				}

				#region ctor
					constructor(private registerService: FormBuilder) {
						this.existUserEmail = [
						"aaa@aaa.com",
						"bbb@bbb.com",
						"ccc@ccc.com",
						"ddd@ddd.com"
						]
						this.register = registerService.group(
						{
							fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
							email: ['', [Validators.required, this.existEmailValidator(this.existUserEmail)]],
							phoneNumber: registerService.array(['']),
							address: registerService.group({
							city: [''],
							postalCode: [''],
							street: [''],
							}),
							password: ['',[Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
							confirmPassword: ['',[Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
							referral: [''],
							referralOther: [
							'',
							[Validators.required, Validators.pattern('[A-Za-z]{3,}')]
							],
						},
						{
							// Validators:[passwordMatch()]
							validators:passwordMatch()
						}
						)

					}
				#endregion
			#endregion

			#region[17] password html
				<div class="mb-5">
					<label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
					<input type="password" id="password" name="password" formControlName="password"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Password" required />
					<div *ngIf="password?.invalid && register?.errors?.['unmatchedPassword']">

						<div *ngIf="(password?.touched && confirmPassword?.touched) && (password?.invalid || !(register?.errors?.['unmatchedPassword']))"
							class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">

							<div class="text-sm font-medium ms-3"
								*ngIf="password?.errors?.['required'] && password?.touched">
								Please Fill This Input
							</div>
							<div class="text-sm font-medium ms-3" *ngIf="register?.errors?.['unmatchedPassword'] ">
								Please Fill This Input at least 3 letters not
								matching
							</div>
						</div>
					</div>
				</div>

				<div class="mb-5">
					<label for="confirmPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Confirm
						Password</label>
					<input type="password" id="confirmPassword" name="confirmPassword" formControlName="confirmPassword"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Password" required />
						<div *ngIf="confirmPassword?.invalid && register?.errors?.['unmatchedPassword']">
							<div *ngIf="(password?.touched && confirmPassword?.touched) && (confirmPassword?.invalid || !(register?.errors?.['unmatchedPassword']))"
								class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">
				
								<div class="text-sm font-medium ms-3"
									*ngIf="confirmPassword?.errors?.['required'] && confirmPassword?.touched">
									Please Fill This Input
								</div>
								<div class="text-sm font-medium ms-3" *ngIf="register?.errors?.['unmatchedPassword'] ">
									Please Fill This Input at least 3 letters not
									matching
								</div>
							</div>
						</div>
				</div>
			#endregion
		#endregion

		#region[4] full reactive form html
			<form class="grid grid-cols-4" [formGroup]="register" (ngSubmit)="submit()">
				<div class="grid col-span-1 mx-3">
					<div class="mb-5">
						<label for="fullName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Full Name</label>
						<input type="text" id="fullName" name="fullName" formControlName="fullName"
							[class.is-valid]="fullName?.valid"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Full Name" required />
						<div [hidden]="fullName?.valid || fullName?.untouched">
							<div
								class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">

								<div class="text-sm font-medium ms-3" *ngIf="fullName?.errors?.['required']">
									Please Fill This Input
								</div>
								<div class="text-sm font-medium ms-3" *ngIf="fullName?.errors?.['pattern'] ">
									Please Fill This Input at least 3 letters {{fullName?.errors?.['pattern'].actualValue }} not
									matching
								</div>
							</div>
						</div>
					</div>

					<div class="mb-5">
						<label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
						<input type="email" id="email" name="email" formControlName="email"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Email" required />
						<div [hidden]="email?.valid || email?.untouched">
							<div
								class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">

								<div class="text-sm font-medium ms-3" *ngIf="email?.errors?.['required']">
									Please Fill This Input
								</div>
								<!-- <div class="text-sm font-medium ms-3" *ngIf="email?.errors?.['emailNotValid'] ">
										Please Fill This Input at least 3 letters {{email?.errors?.['emailNotValid'].value }} not
										matching
									</div> -->
								<div class="text-sm font-medium ms-3" *ngIf="email?.errors?.['existEmail'] ">
									Please Fill This Input at least 3 letters {{email?.errors?.['existEmail'].value }} not
									matching
								</div>
							</div>
						</div>
					</div>

					<div class="mb-5" formGroupName="address">
						<div>
							<label for="city" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">City</label>
							<input type="text" id="city" name="city" formControlName="city"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
								placeholder="Please Enter Your city" required />
						</div>
						<div>
							<label for="postalCode" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Postal
								Code</label>
							<input type="text" id="postalCode" name="postalCode" formControlName="postalCode"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
								placeholder="Please Enter Your Postal Code" required />
						</div>
						<div>
							<label for="street" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Street</label>
							<input type="text" id="street" name="street" formControlName="street"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
								placeholder="Please Enter Your Street" required />
						</div>
					</div>

					<div class="flex justify-center my-3">
						<div class="flex items-center me-4">
							<input id="referral1" type="radio" value="socialMedia" name="referral" formControlName="referral"
								class="w-4 h-4 text-red-600 bg-gray-100 border-gray-300 focus:ring-red-500 dark:focus:ring-red-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
								(change)="updateReferralValidator">
							<label for="red-radio" class="text-sm font-medium text-gray-900 ms-2 dark:text-gray-300">Social
								Media</label>
						</div>
						<div class="flex items-center me-4">
							<input id="referral2" type="radio" value="friend" name="referral" formControlName="referral"
								class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
								(change)="updateReferralValidator">
							<label for="green-radio"
								class="text-sm font-medium text-gray-900 ms-2 dark:text-gray-300">Friend</label>
						</div>
						<div class="flex items-center me-4">
							<input checked id="referral3" type="radio" value="referralOther" name="referral"
								formControlName="referral"
								class="w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 focus:ring-purple-500 dark:focus:ring-purple-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
								(change)="updateReferralValidator">
							<label for="purple-radio"
								class="text-sm font-medium text-gray-900 ms-2 dark:text-gray-300">referralOther</label>
						</div>
					</div>

					<div class="mb-5" *ngIf="referral?.value=='referralOther'">
						<label for="referralOther"
							class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">referralOther</label>
						<input type="text" id="referralOther" name="referralOther" formControlName="referralOther"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Email" required />
					</div>

					<button (click)="fillForm()"
						class="mx-2 text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
						auto fill form
					</button>
				</div>
				<div class="grid col-span-1 mx-3 ">
					<div formArrayName="phoneNumber" class="mb-5" *ngFor="let phoneNumber of phoneNumbers.controls;let i=index">
						<label for="{{'phoneNumber'+i+1}}" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
							phone number # {{i+1}}
						</label>

						<input type="number" id="{{'phoneNumber'+i+1}}" name="{{'phoneNumbers'+i}}" [formControlName]="i"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Phone Number" required />

						<button (click)="addNumber($event)"
							class="my-2 text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800">
							+
						</button>
					</div>


					<div class="mb-5">
						<label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
						<input type="password" id="password" name="password" formControlName="password"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Password" required />
						<div *ngIf="password?.invalid && register?.errors?.['unmatchedPassword']">

							<div *ngIf="(password?.touched && confirmPassword?.touched) && (password?.invalid || !(register?.errors?.['unmatchedPassword']))"
								class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">

								<div class="text-sm font-medium ms-3"
									*ngIf="password?.errors?.['required'] && password?.touched">
									Please Fill This Input
								</div>
								<div class="text-sm font-medium ms-3" *ngIf="register?.errors?.['unmatchedPassword'] ">
									Please Fill This Input at least 3 letters not
									matching
								</div>
							</div>
						</div>
					</div>

					<div class="mb-5">
						<label for="confirmPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Confirm
							Password</label>
						<input type="password" id="confirmPassword" name="confirmPassword" formControlName="confirmPassword"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Password" required />
							<div *ngIf="confirmPassword?.invalid && register?.errors?.['unmatchedPassword']">
								<div *ngIf="(password?.touched && confirmPassword?.touched) && (confirmPassword?.invalid || !(register?.errors?.['unmatchedPassword']))"
									class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">
					
									<div class="text-sm font-medium ms-3"
										*ngIf="confirmPassword?.errors?.['required'] && confirmPassword?.touched">
										Please Fill This Input
									</div>
									<div class="text-sm font-medium ms-3" *ngIf="register?.errors?.['unmatchedPassword'] ">
										Please Fill This Input at least 3 letters not
										matching
									</div>
								</div>
							</div>
					</div>

					<div class="flex items-start mb-5">
						<div class="flex items-center h-5">
							<input id="remember" type="checkbox" value=""
								class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800"
								required />
						</div>
						<label for="remember" class="text-sm font-medium text-gray-900 ms-2 dark:text-gray-300">Remember me</label>
					</div>



					<button type="submit" [disabled]="register.invalid"
						class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
						Submit
					</button>
				</div>
				<div class="grid items-center col-span-2 mx-3">
					<img src="https://picsum.photos/2000/1100" alt="" class="grid justify-center rounded-xl">
				</div>
			</form>

			<div class="grid justify-center text-violet-500">
				<div class="flex">

					{{register.value | json}} |
				</div>
				<div class="grid text-amber-500">

					<!-- {{register.get('fullName')?.errors | json}} -->
					the error is {{fullName?.errors | json}}
				</div>
				<div class="grid text-red-500">
					the error is {{register.get('referralOther')?.errors | json}}
				</div>
				<div class="grid text-cyan-500">
					the error is {{register.get('email')?.errors | json}}
				</div>
			</div>
		#endregion

		#region[5] full ts reactive form
			export class RegisterComponent {
			register!: FormGroup;
			existUserEmail: string[] = []
			constructor(private registerService: FormBuilder) {
				this.existUserEmail = [
				"aaa@aaa.com",
				"bbb@bbb.com",
				"ccc@ccc.com",
				"ddd@ddd.com"
				]
				this.register = registerService.group(
				{
					fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
					email: ['', [Validators.required, this.existEmailValidator(this.existUserEmail)]],
					phoneNumber: registerService.array(['']),
					address: registerService.group({
					city: [''],
					postalCode: [''],
					street: [''],
					}),
					password: ['',[Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
					confirmPassword: ['',[Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
					referral: [''],
					referralOther: [
					'',
					[Validators.required, Validators.pattern('[A-Za-z]{3,}')]
					],
				},
				{
					// Validators:[passwordMatch()]
					validators:passwordMatch()
				}
				)
			}
			get fullName() {
				return this.register.get('fullName')
			}
			// this.register=new FormGroup(
			//   {
			//     fullName:new FormControl('',[Validators.required,Validators.pattern('[A-Za-z]{3}')]),
			//     email:new FormControl(''),
			//     phoneNumber:new FormControl(''),
			//     address:new FormGroup({
			//       city:new FormControl(''),
			//       postalCode:new FormControl(''),
			//       street:new FormControl('')
			//     }),
			//     password:new FormControl(''),
			//     confirmPassword:new FormControl(''),

			//   }
			// )
			get referral() {
				return this.register.get('referral')
			}
			get updateReferralValidator() {
				if (this.referral?.value == 'referralOther') {
				this.register.get('referralOther')?.addValidators([Validators.required, Validators.pattern('[A-Za-z]{3,}')])
				} else {
				this.register.get('referralOther')?.clearValidators()
				}
				return this.register.get('referralOther')?.updateValueAndValidity()
			}
			fillForm() {
				this.register.patchValue( //all value ,.patchValue some values
				{
					fullName: "iti",
					email: "mostafamohamedtaha.udemy@gmail.com",
					address: {
					city: "cairo",
					postalCode: "123123",
					street: "nasr"
					}
				}
				)
			}
			submit() {
				let registerUser: IUser = this.register.value as IUser
				console.log(registerUser)
			}
			get phoneNumbers() {
				return this.register.get('phoneNumber') as FormArray
			}
			addNumber(event: any) {
				this.phoneNumbers.controls.push(this.registerService.control(''));
				event.target?.classList.add('hidden')
			}

			get email() {
				return this.register.get('email')
			}
			existEmailValidator(existEmails: string[]): ValidatorFn {
				return (control: AbstractControl): ValidationErrors | null => {
				let emailValue: string = control.value
				let validationError = {
					"existEmail": {
					"value": emailValue
					}
				}
				if (control.untouched && emailValue.length == 0)
					return null
				let foundEmail = existEmails.includes(emailValue)
				// return emailValue.includes('@')?null:validationError
				return foundEmail ? validationError : null
				}
			}

			get password(){
				return this.register.get('password')
			}
			get confirmPassword(){
				return this.register.get('confirmPassword')
			}
			}
		#endregion

		#region[6] full passwordMatch
			export function passwordMatch(complexPassword:boolean=false):ValidatorFn{
				return(control:AbstractControl):ValidationErrors|null=>{
					let passwordControl=control.get('password')
					let confirmPasswordControl=control.get('confirmPassword')
					// if(!passwordControl || !confirmPasswordControl || !passwordControl.value || !confirmPasswordControl.value)
					//     return null
					let valueError={
						unmatchedPassword:{
							"password":passwordControl?.value,
							"confirmPassword":confirmPasswordControl?.value
						}
					}
					return passwordControl?.value==confirmPasswordControl?.value?null:valueError
				}
			}
		#endregion
	#endregion

	#region [9] lazy loading|localize|dummy
		#region[1] lazy loading 16
			#region[1] make module
				ng g m userModule | ng g c userProfile | ng g c editUserProfile
				//at routing
				//in app-routing
				{
				path: 'user',
				loadChildren: () => import('src/app/components/user-module/user-module.module').then(m => m.UserModuleModule )
				}
			#endregion

			#region[2] user module 
				const routes:Routes=[
					{path:'',redirectTo:'/user/user',pathMatch:'full'},
					{path:'user',component:UserProfileComponent,canActivate:[AuthGuard]},
					{path:'edit',component:EditUserProfileComponent,canActivate:[AuthGuard]}
				]


				@NgModule({
				declarations: [
					UserProfileComponent,
					EditUserProfileComponent
				],
				imports: [
					CommonModule,
					RouterModule.forChild(routes)
				]
				})
				export class UserModuleModule { }
			#endregion
		#endregion

		#region[2] building localization 17
			ng build --configuration=production
		#endregion

		#region[3] api link dummy 18
			apiLink:'https://dummyjson.com/products'
			apiLink:'https://fakestoreapi.com'
		#endregion
	#endregion
#endregion

#region[1] shared modules routing
	ng g component nameComponent --module=app.module.ts
	#region app module
		@NgModule({
		declarations: [
			AppComponent,
		],
		imports: [
			BrowserModule,
			AppRoutingModule,
			SharedModule,
			ComponentsModule
		],
		providers: [],
		bootstrap: [AppComponent]
		})
	#endregion
	
	#region shared module
		@NgModule({
		declarations: [
			HomeComponent,
			MainLayoutComponent,
			PrdComponent,
			PrdDetailsComponent
		],
		imports: [
			CommonModule,
			RouterModule.forChild(routes)
		],
		exports:[
			CommonModule,
			HomeComponent,
			MainLayoutComponent,
			PrdComponent,
			PrdDetailsComponent
		]
		})
	#endregion
	
	#region html 
		<li>
			<div [routerLink]="['/product/prd']" [routerLinkActive]="['text-red-700']"
				class="block px-3 py-2 rounded text-re-900 hover:bg-red-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-red-700 dark:hover:text-white md:dark:hover:bg-transparent">
				About
			</div>
		</li>
		<li>
			<div [routerLink]="['/product/prd/1']" [routerLinkActive]="['text-red-700']"
				class="block px-3 py-2 rounded text-re-900 hover:bg-red-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-red-700 dark:hover:text-white md:dark:hover:bg-transparent">
				Services
			</div>
		</li>
	#endregion
	
	#region mainLayout html for making child as login out side the children
		<app-header />
		<app-sidebar  class="grid justify-center" />
		<router-outlet />
		<app-footer />
	#endregion
	
	#region app-routing
		const routes: Routes = [
		{
			path: '', component: MainLayoutComponent, children: [
			{ path: '', redirectTo: '/home', pathMatch: 'full' }, // if not here will not shown with other children inside mainLayout
			{ path: 'home', component: HomeComponent }, //will shown inside mainLayout
			{
				path: 'product',
				loadChildren: () => import('src/app/components/components.module').then(m => m.ComponentsModule)
			}
			]
		}
		, { path: 'footer', component: FooterComponent } //any component out will shown alone
		];
	#endregion
	
	#region product module
		const routes: Routes = [
			{ path: 'home', component: HomeComponent },
			{ path: 'prd/:id', component: PrdDetailsComponent },
			{ path: 'prd', component: PrdComponent },
		]
	#endregion

	#region make module
		ng g c components/home

		ng g m auth --route auth --module app.module
		ng g m analytics --route analytics --module app.module

		ng g c auth/component/login --module auth
		ng g c auth/component/signUp --module auth

		#region app routing - auth routing - auth module
			const routes: Routes = [
				{path:'',component:HomeComponent},
				{ path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) },
				{ path: 'analytics', loadChildren: () => import('./analytics/analytics.module').then(m => m.AnalyticsModule) }
			];

			const routes: Routes = [
				{ path: '', component: AuthComponent },
				{ path: 'login', component: LoginComponent },
				{ path: 'signUp', component: SignUpComponent },
			];

			@NgModule({
			declarations: [
				AuthComponent,
				LoginComponent,
				SignUpComponent
			],
			imports: [
				CommonModule,
				AuthRoutingModule
			]
			})
		#endregion
	#endregion
#endregion

#region [1] dark|translate|rating|page

	#region[1] dark mode 20
		#region tailwind.config ts
			darkMode: 'class',
		#endregion

		#region navbar ts
			@Input() darkMode: boolean = false;
			@Output() toggleDarkMode = new EventEmitter<void>();
			toggleDarkModeClicked() {
				this.toggleDarkMode.emit();
			}
		#endregion

		#region navbar html
			#region module imports
				npm i @ng-icons/core
				npm i @ng-icons/bootstrap-icons @ng-icons/css.gg
				NgIconsModule.withIcons({ bootstrapCart4, bootstrapTrash3, bootstrapInfoCircleFill,bootstrapList,bootstrapMoonStarsFill,bootstrapSunFill}),
			#endregion

			<div [ngClass]="{'dark': darkMode}" [dir]="'dir' |translate">
			<div class="flex justify-center">
				<button type="button"
					class="relative inline-flex items-center p-3 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
					(click)="toggleDarkModeClicked()">
					<ng-icon *ngIf="!darkMode" name="bootstrapSunFill"></ng-icon>
					<ng-icon *ngIf="darkMode" name="bootstrapMoonStarsFill "></ng-icon>
				</button>
			</div>
		#endregion

		#region main ts
			darkMode = false;

			toggleDarkMode() {
			this.darkMode = !this.darkMode;
			}
			@HostBinding('class.dark') get mode() {
				return this.darkMode;
			}
		#endregion

		#region main html
			<div class="dark:bg-slate-700" [dir]="'dir' |translate">
				<app-navbar [darkMode]="darkMode" (toggleDarkMode)="toggleDarkMode()"></app-navbar>
				<router-outlet/>
				<app-footer />
			</div>
		#endregion
	#endregion

	#region[2] translate 21
		#region[b] install i18n
			#region [1] install 

				npm install @ngx-translate/core @ngx-translate/http-loader --save
			#endregion

			#region [2] app module or shared module
				// Function for loading translation files
				export function HttpLoaderFactory(http: HttpClient) {
				return new TranslateHttpLoader(http);
				}

				@NgModule({
				imports: [
					// ...
					HttpClientModule,
					TranslateModule.forRoot({
					loader: {
						provide: TranslateLoader,
						useFactory: HttpLoaderFactory,
						deps: [HttpClient]
					}
					})
					// ...
				],
				// ...
				})
			#endregion

			#region [3] english example assets
				{
					"dir": "ltr",
					"navbar": {
						"name":"Family Cool",
						"home": "Home Page",
						"products": "The Products",
						"contacts": "Contact Us",
						"prices": "Basket",
						"offers": "Offers",
						"premium": "Premium Account",
						"register": "Sign Up",
						"sign in": "Sign In",
						"signOut": "Sign Out"
					},
				}
			#endregion

			#region [4] AppComponent
				import { TranslateService } from '@ngx-translate/core'

				ngOnInit(): void {
					initFlowbite();
					this.loadTranslations();
				}

				isTranslated: boolean = false
				constructor(private TranslateService: TranslateService, private renderer: Renderer2, private el: ElementRef) {
			
				this.TranslateService.setDefaultLang('en'); // Set your default language
				this.TranslateService.use('en'); // Set the initial language to use
				this.TranslateService.onLangChange.subscribe(() => {
					// Set isTranslated to true when translated content is displayed
					this.isTranslated = true;
				});
				}

				loadTranslations() {
				// Here you can load translations using the translate service.
				// For example, if you have translation files, you can load them like this:
				this.TranslateService.get('key').subscribe((res: string) => {
					console.log(res)
				});
				}
				translate(event: any) {
				this.TranslateService.use(event.target.value)
				}
			#endregion

			#region [5] switch lang
				#region [1] navbar TS
					import { TranslateService } from '@ngx-translate/core'

					constructor(private TranslateService: TranslateService, private basketService: BasketService, private accountService: AccountService) { }
					translate(event: any) {
						this.TranslateService.use(event.target.value)
					}
				#endregion

				#region [2] navbar html
					<div [ngClass]="{'dark': darkMode}" [dir]="'dir' |translate">
					<div class="flex mx-2">
						<select id="states"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg mx- border-l-gray-100 dark:border-l-gray-700 border-l-2 focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							(change)="translate($event)">
							<option value="en">
								<div class="inline-flex items-center">
									<svg aria-hidden="true" class="h-3.5 w-3.5 rounded-full mr-2"
										xmlns="http://www.w3.org/2000/svg" id="flag-icon-css-us" viewBox="0 0 512 512">
										<g fill-rule="evenodd">
											<g strokeWidth="1pt">
												<path fill="#bd3d44"
													d="M0 0h247v10H0zm0 20h247v10H0zm0 20h247v10H0zm0 20h247v10H0zm0 20h247v10H0zm0 20h247v10H0zm0 20h247v10H0z"
													transform="scale(3.9385)" />
												<path fill="#fff"
													d="M0 10h247v10H0zm0 20h247v10H0zm0 20h247v10H0zm0 20h247v10H0zm0 20h247v10H0zm0 20h247v10H0z"
													transform="scale(3.9385)" />
											</g>
											<path fill="#192f5d" d="M0 0h98.8v70H0z" transform="scale(3.9385)" />
											<path fill="#fff"
												d="M8.2 3l1 2.8H12L9.7 7.5l.9 2.7-2.4-1.7L6 10.2l.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8H45l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.4 1.7 1 2.7L74 8.5l-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9L92 7.5l1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm-74.1 7l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7H65zm16.4 0l1 2.8H86l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm-74 7l.8 2.8h3l-2.4 1.7.9 2.7-2.4-1.7L6 24.2l.9-2.7-2.4-1.7h3zm16.4 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8H45l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9L92 21.5l1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm-74.1 7l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7H65zm16.4 0l1 2.8H86l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm-74 7l.8 2.8h3l-2.4 1.7.9 2.7-2.4-1.7L6 38.2l.9-2.7-2.4-1.7h3zm16.4 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8H45l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9L92 35.5l1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm-74.1 7l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7H65zm16.4 0l1 2.8H86l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm-74 7l.8 2.8h3l-2.4 1.7.9 2.7-2.4-1.7L6 52.2l.9-2.7-2.4-1.7h3zm16.4 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8H45l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9L92 49.5l1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm-74.1 7l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7H65zm16.4 0l1 2.8H86l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm-74 7l.8 2.8h3l-2.4 1.7.9 2.7-2.4-1.7L6 66.2l.9-2.7-2.4-1.7h3zm16.4 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8H45l-2.4 1.7 1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9zm16.4 0l1 2.8h2.8l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h3zm16.5 0l.9 2.8h2.9l-2.3 1.7.9 2.7-2.4-1.7-2.3 1.7.9-2.7-2.4-1.7h2.9zm16.5 0l.9 2.8h2.9L92 63.5l1 2.7-2.4-1.7-2.4 1.7 1-2.7-2.4-1.7h2.9z"
												transform="scale(3.9385)" />
										</g>
									</svg>
									English (US)
								</div>
							</option>
							<option value="ar">
								<div class="inline-flex items-center">
									<svg class="h-3.5 w-3.5 rounded-full mr-2" xmlns="http://www.w3.org/2000/svg"
										xmlnsXlink="http://www.w3.org/1999/xlink" width="40" zoomAndPan="magnify"
										viewBox="0 0 30 30.000001" height="40" preserveAspectRatio="xMidYMid meet"
										version="1.0">
										<defs>
											<clipPath id="id1">
												<path
													d="M 2.429688 4.792969 L 27.105469 4.792969 L 27.105469 22.9375 L 2.429688 22.9375 Z M 2.429688 4.792969 "
													clip-rule="nonzero" />
											</clipPath>
											<clipPath id="id2">
												<path
													d="M 2.429688 10 L 27.105469 10 L 27.105469 18 L 2.429688 18 Z M 2.429688 10 "
													clip-rule="nonzero" />
											</clipPath>
											<clipPath id="id3">
												<path
													d="M 2.429688 4.792969 L 27.105469 4.792969 L 27.105469 11 L 2.429688 11 Z M 2.429688 4.792969 "
													clip-rule="nonzero" />
											</clipPath>
										</defs>
										<g clip-path="url(#id1)">
											<path fill="rgb(7.839966%, 7.839966%, 7.839966%)"
												d="M 27.101562 20.144531 C 27.101562 21.6875 25.875 22.9375 24.359375 22.9375 L 5.175781 22.9375 C 3.664062 22.9375 2.4375 21.6875 2.4375 20.144531 L 2.4375 7.582031 C 2.4375 6.042969 3.664062 4.792969 5.175781 4.792969 L 24.359375 4.792969 C 25.875 4.792969 27.101562 6.042969 27.101562 7.582031 Z M 27.101562 20.144531 "
												fill-opacity="1" fill-rule="nonzero" />
										</g>
										<g clip-path="url(#id2)">
											<path fill="rgb(93.328857%, 93.328857%, 93.328857%)"
												d="M 2.4375 10.375 L 27.101562 10.375 L 27.101562 17.355469 L 2.4375 17.355469 Z M 2.4375 10.375 "
												fill-opacity="1" fill-rule="nonzero" />
										</g>
										<g clip-path="url(#id3)">
											<path fill="rgb(80.778503%, 7.058716%, 14.509583%)"
												d="M 24.359375 4.792969 L 5.175781 4.792969 C 3.664062 4.792969 2.4375 6.042969 2.4375 7.582031 L 2.4375 10.375 L 27.101562 10.375 L 27.101562 7.582031 C 27.101562 6.042969 25.875 4.792969 24.359375 4.792969 Z M 24.359375 4.792969 "
												fill-opacity="1" fill-rule="nonzero" />
										</g>
										<path fill="rgb(74.899292%, 57.649231%, 0%)"
											d="M 12.542969 16.351562 C 12.542969 16.351562 12.550781 16.523438 12.703125 16.613281 C 12.703125 16.613281 12.660156 16.742188 12.820312 16.820312 C 12.980469 16.894531 13.558594 17.015625 14.566406 17.015625 C 15.570312 17.015625 16.140625 16.90625 16.289062 16.828125 C 16.4375 16.753906 16.449219 16.578125 16.449219 16.578125 C 16.449219 16.578125 16.609375 16.492188 16.597656 16.382812 C 16.589844 16.273438 16.375 16.15625 16.375 16.15625 C 16.375 16.15625 16.320312 16.011719 16.171875 15.957031 C 16.019531 15.902344 15.539062 16.199219 14.617188 16.15625 C 13.699219 16.109375 13.171875 15.96875 13.003906 15.980469 C 12.832031 15.992188 12.757812 16.164062 12.757812 16.164062 C 12.757812 16.164062 12.5625 16.253906 12.542969 16.351562 Z M 12.542969 16.351562 "
											fill-opacity="1" fill-rule="nonzero" />
										<path fill="rgb(93.328857%, 93.328857%, 93.328857%)"
											d="M 12.660156 16.339844 C 12.652344 16.40625 12.789062 16.546875 12.789062 16.546875 C 12.789062 16.546875 12.789062 16.710938 12.925781 16.753906 C 13.066406 16.796875 13.632812 16.90625 14.554688 16.894531 C 15.476562 16.886719 16.128906 16.832031 16.203125 16.765625 C 16.277344 16.699219 16.34375 16.558594 16.34375 16.558594 C 16.34375 16.558594 16.492188 16.449219 16.480469 16.363281 C 16.46875 16.273438 16.257812 16.21875 16.257812 16.21875 C 16.257812 16.21875 16.195312 16.089844 16.125 16.035156 C 16.054688 15.980469 15.59375 16.253906 14.609375 16.253906 C 13.644531 16.253906 13.085938 16.011719 12.992188 16.023438 C 12.894531 16.035156 12.832031 16.21875 12.832031 16.21875 C 12.832031 16.21875 12.671875 16.265625 12.660156 16.339844 Z M 12.660156 16.339844 "
											fill-opacity="1" fill-rule="nonzero" />
										<path fill="rgb(74.899292%, 57.649231%, 0%)"
											d="M 16.726562 12.109375 C 16.726562 12.109375 16.707031 11.597656 16.246094 11.660156 C 15.785156 11.726562 15.753906 11.957031 15.261719 12.011719 L 15.160156 12.019531 C 15.085938 11.820312 15.023438 11.535156 15.023438 11.3125 C 15.023438 10.984375 15.121094 10.84375 14.789062 10.679688 C 14.457031 10.515625 14.394531 10.667969 14.394531 10.667969 C 14.394531 10.667969 14.136719 10.539062 14.019531 10.636719 C 13.898438 10.734375 13.964844 10.984375 14.019531 10.910156 C 14.070312 10.832031 14.285156 11.050781 14.285156 11.050781 C 14.359375 11.414062 14.152344 11.804688 14.011719 12.023438 C 13.960938 12.019531 13.921875 12.015625 13.867188 12.011719 C 13.375 11.957031 13.34375 11.726562 12.882812 11.660156 C 12.421875 11.597656 12.402344 12.109375 12.402344 12.109375 L 12.21875 16.066406 L 12.59375 15.773438 L 12.597656 15.726562 L 13.375 15.019531 L 13.507812 14.886719 L 13.183594 15.847656 C 13.183594 15.847656 12.691406 15.816406 12.832031 16.21875 C 12.832031 16.21875 12.90625 15.992188 13.035156 16.035156 C 13.164062 16.078125 13.535156 16.175781 13.535156 16.175781 L 13.664062 16.382812 L 13.824219 16.230469 L 14.328125 16.207031 C 14.328125 16.207031 14.488281 16.25 14.480469 16.394531 C 14.511719 16.316406 14.515625 16.25 14.503906 16.195312 L 14.65625 16.1875 C 14.640625 16.242188 14.644531 16.308594 14.679688 16.394531 C 14.667969 16.253906 14.828125 16.207031 14.828125 16.207031 L 15.332031 16.230469 L 15.492188 16.382812 L 15.621094 16.175781 C 15.621094 16.175781 15.996094 16.078125 16.125 16.035156 C 16.25 15.992188 16.328125 16.21875 16.328125 16.21875 C 16.464844 15.816406 15.972656 15.847656 15.972656 15.847656 L 15.664062 14.933594 L 15.753906 15.019531 L 16.53125 15.726562 L 16.535156 15.773438 L 16.910156 16.066406 Z M 14.597656 14.507812 C 13.828125 14.023438 13.761719 12.796875 13.761719 12.796875 C 13.761719 12.796875 14.238281 12.769531 14.585938 12.523438 C 14.898438 12.804688 15.433594 12.773438 15.433594 12.773438 C 15.433594 12.773438 15.394531 14.003906 14.597656 14.507812 Z M 16.363281 11.957031 L 15.710938 12.589844 L 15.601562 12.632812 C 15.488281 12.636719 14.941406 12.640625 14.597656 12.328125 C 14.167969 12.632812 13.582031 12.65625 13.582031 12.65625 L 13.488281 12.617188 L 12.765625 11.957031 L 12.578125 12.035156 C 12.585938 11.957031 12.628906 11.78125 12.863281 11.816406 C 13.25 11.871094 13.410156 12.085938 13.816406 12.132812 L 13.929688 12.144531 L 13.890625 12.195312 C 13.953125 12.195312 14.046875 12.175781 14.117188 12.160156 L 14.191406 12.167969 L 14.15625 12.292969 C 14.210938 12.277344 14.292969 12.230469 14.355469 12.1875 L 14.535156 12.203125 L 14.574219 12.261719 L 14.710938 12.191406 L 14.800781 12.183594 C 14.882812 12.230469 14.992188 12.269531 14.992188 12.269531 L 15.015625 12.164062 C 15.113281 12.226562 15.273438 12.226562 15.273438 12.226562 C 15.253906 12.210938 15.234375 12.171875 15.214844 12.140625 L 15.316406 12.128906 C 15.722656 12.085938 15.878906 11.871094 16.265625 11.8125 C 16.503906 11.78125 16.546875 11.957031 16.554688 12.035156 Z M 16.363281 11.957031 "
											fill-opacity="1" fill-rule="nonzero" />
										<path fill="rgb(93.328857%, 93.328857%, 93.328857%)"
											d="M 14.339844 14.488281 L 13.953125 15.980469 L 13.3125 15.847656 L 13.976562 13.929688 Z M 14.820312 14.488281 L 15.203125 15.980469 L 15.847656 15.847656 L 15.183594 13.929688 Z M 14.820312 14.488281 "
											fill-opacity="1" fill-rule="nonzero" />
										<path fill="rgb(74.899292%, 57.649231%, 0%)"
											d="M 13.921875 12.917969 C 13.921875 12.917969 13.976562 13.546875 14.253906 14.039062 L 14.253906 12.773438 C 14.253906 12.773438 14.074219 12.882812 13.921875 12.917969 Z M 15.261719 12.9375 C 15.261719 12.9375 15.207031 13.570312 14.929688 14.0625 L 14.929688 12.796875 C 14.929688 12.796875 15.109375 12.90625 15.261719 12.9375 Z M 15.261719 12.9375 "
											fill-opacity="1" fill-rule="nonzero" />
										<path fill="rgb(93.328857%, 93.328857%, 93.328857%)"
											d="M 14.050781 10.777344 C 14.050781 10.777344 14.125 10.703125 14.339844 10.855469 C 14.480469 10.953125 14.601562 11.027344 14.601562 11.027344 C 14.601562 11.027344 14.691406 10.933594 14.820312 10.957031 C 14.949219 10.976562 14.875 11.160156 14.898438 11.542969 C 14.917969 11.921875 15.070312 12.085938 15.070312 12.085938 L 14.886719 11.976562 L 14.898438 12.097656 L 14.695312 12 L 14.597656 12.140625 L 14.5 11.988281 L 14.34375 12.085938 L 14.296875 11.957031 L 14.113281 12.054688 C 14.113281 12.054688 14.382812 11.714844 14.402344 11.34375 C 14.410156 11.234375 14.382812 10.984375 14.382812 10.984375 C 14.382812 10.984375 14.210938 10.765625 14.050781 10.777344 Z M 14.050781 10.777344 "
											fill-opacity="1" fill-rule="nonzero" />
										<path fill="rgb(74.899292%, 57.649231%, 0%)"
											d="M 13.085938 16.417969 C 12.964844 16.492188 13.011719 16.535156 13.085938 16.570312 C 13.164062 16.601562 13.613281 16.65625 14.523438 16.679688 C 15.453125 16.699219 16.03125 16.589844 16.105469 16.546875 C 16.179688 16.503906 16.191406 16.425781 16.0625 16.40625 C 15.933594 16.382812 15.292969 16.492188 14.511719 16.492188 C 13.546875 16.492188 13.140625 16.382812 13.085938 16.417969 Z M 13.085938 16.417969 "
											fill-opacity="1" fill-rule="nonzero" />
									</svg>
									العربية
								</div>
							</option>

						</select>
					</div>
				#endregion

				#region [3] use 
					<div>{{'navbar.prices' | translate}}</div>
				#endregion
			#endregion
		#endregion
	#endregion

	#region[3] rating 22
		#region html
			<div>
				<span igxCardHeaderSubtitle>
					User Rating: {{ item.rating.rate}} 
				</span>
				<igc-rating [(ngModel)]="item.rating.rate" name="userRating"></igc-rating>
			</div>

			<div class="sample-column">
				<form>
					<igx-card elevated>
						<igx-card-media height="300px">
							<img [src]="product.ImageURL">
						</igx-card-media>

						<igx-card-header>
							<h4 igxCardHeaderTitle>{{ product.ProductName }}</h4>
						</igx-card-header>

						<igx-card-content>
							<span igxCardHeaderSubtitle>Price: {{ product.UnitPrice | currency:'USD' }}</span>
							<span igxCardHeaderSubtitle>
								User Rating: {{ productRating }} from {{ product.TotalReviews + (product.UserRating !== 0 ? 1 : 0) }} users
							</span>
							<igc-rating [(ngModel)]="product.UserRating" name="userRating"></igc-rating>
						</igx-card-content>
						<igx-card-actions>
							<button igxButton="outlined" igxRipple igxStart>Buy again</button>
							<button igxButton="icon"
								igxRipple
								[igxRippleCentered]="true"
								*ngFor="let icon of product.icons" igxEnd>
								<igx-icon [style.color]="'#ECAA53'">{{icon}}</igx-icon>
							</button>
						</igx-card-actions>
					</igx-card>
				</form>
			</div>
		#endregion

		#region tailwind
			.sample-column {
				padding-bottom: 50px;
			}

			.igx-card {
				flex: 1 1 0;
				margin: 5px;
				width: 500px;
			}

			.igx-card-header__subtitle {
				font-size: 0.999rem;
			}

			igx-card-content {
				display: flex;
				flex-direction: row;
				flex-wrap: wrap;
				align-content: space-around;
			}

			span[igxCardHeaderSubtitle] {
				flex-basis: 50%;
				min-width: 50%;
				padding-left: 8px;
			}
		#endregion

		#region ts
			import { Component} from '@angular/core';
			import { IgcRatingComponent, defineComponents } from 'igniteui-webcomponents';

			defineComponents(IgcRatingComponent)

			@Component({
				selector: 'app-rating-sample',
				styleUrls: ['./rating-form.component.scss'],
				templateUrl: './rating-form.component.html'
			})
			export class RatingInFormComponent {

				public product = {
					ProductID: 1,
					ProductName: "Desk",
					UnitPrice: 265.99,
					UnitsInStock: 2,
					AverageRating: 3.4,
					TotalReviews: 6,
					UserRating: 0,
					ImageURL: 'https://cdn.pixabay.com/photo/2020/08/25/18/28/workplace-5517744_960_720.jpg',
					OrderDate: new Date("2005-03-17"),
					icons: ['favorite', 'share']
				};

				public get productRating(): string {
					const rating = this.product.AverageRating +
						((this.product.UserRating || this.product.AverageRating) - this.product.AverageRating) /
						(this.product.TotalReviews + 1);
					return rating.toFixed(1);
				}
			}
		#endregion

		#region module
			ng add igniteui-angular
			npm install igniteui-webcomponents --save
			import { IgcFormControlDirective, IgcFormsModule, IgxButtonModule, IgxCardModule,IgxIconComponent, IgxIconModule, IgxRippleModule  } from 'igniteui-angular';
			import { FormsModule } from '@angular/forms';

			#region main.ts and module 
				import { IgcRatingComponent,defineComponents } from 'igniteui-webcomponents';

				defineComponents(IgcRatingComponent)

				@NgModule({
					schemas:[CUSTOM_ELEMENTS_SCHEMA],
				})
			#endregion
		#endregion
	#endregion

	#region[4] pagination 23
		#region page 1

			#region npx-pagination
				npm i ngx-pagination
			#endregion

			#region html pag comp
				<div class="d-flex justify-content-between">
					<div class="d-flex align-items-center">
						<div>
						Showing {{ startIndex }}-{{ endIndex }} of {{ totalItemCount }} Entries
						</div>
						<select
						name="paginationOption"
						id="paginationOption"
						[(ngModel)]="selectedItemsPerPage"
						(ngModelChange)="onItemsPerPageChange($event)"
						>
						<option
							*ngFor="let option of options"
							[ngValue]="option.key"
						>
							{{ option.value }}
						</option>
						</select>
						<div *ngIf="totalItemCount >= 10">Items / Page</div>
					</div>
					<pagination-controls
						*ngIf="totalItemCount > selectedItemsPerPage"
						(pageChange)="page = $event; onPageChange($event)"
						responsive="true"
						previousLabel="Previous"
						nextLabel="Next"
						screenReaderPaginationLabel="Pagination"
						screenReaderPageLabel="page"
					>
					</pagination-controls>
				</div>
			#endregion

			#region ts pag comp
				#region imports
					import {
					Component,
					EventEmitter,
					Input,
					Output,
					SimpleChanges,
					} from '@angular/core';
				#endregion

				#region ts
					@Input() shouldCallOnPageChangesMethod: boolean;
					@Input() page: number = 1;
					@Input() totalItemCount: number = 0;

					@Output() pageChange: EventEmitter<number> = new EventEmitter<number>();
					@Output() itemsPerPageChange: EventEmitter<number> =
						new EventEmitter<number>();

					selectedItemsPerPage: number = 10;

					startIndex = 1;
					endIndex = 1;
					options = [
						{ key: 10, value: 10 },
						{ key: 20, value: 20 },
					];

					ngOnChanges(changes: SimpleChanges): void {
						if (changes.page && this.shouldCallOnPageChangesMethod) {
						this.onPageChange(this.page);
						}
						if (changes.page && !this.shouldCallOnPageChangesMethod) {
						this.updateFirstPage(this.page);
						}
					}
					onPageChange(pageNo: number): void {
						this.startIndex = (pageNo - 1) * this.selectedItemsPerPage + 1;
						if (pageNo * this.selectedItemsPerPage < this.totalItemCount) {
						this.endIndex = pageNo * this.selectedItemsPerPage;
						} else {
						this.endIndex = this.totalItemCount;
						}
						this.pageChange.emit(pageNo);
					}

					updateFirstPage(pageNo: number): void {
						this.startIndex = (pageNo - 1) * this.selectedItemsPerPage + 1;
						if (pageNo * this.selectedItemsPerPage < this.totalItemCount) {
						this.endIndex = pageNo * this.selectedItemsPerPage;
						} else {
						this.endIndex = this.totalItemCount;
						}
					}

					onItemsPerPageChange(event: number): void {
						this.selectedItemsPerPage = event;
						this.page = 1;
						this.itemsPerPageChange.emit(event);
						this.onPageChange(this.page);
					}
				#endregion
			#endregion

			#region html home
				<table class="table">
				<thead>
					<tr>
					<th scope="col">#</th>
					<th scope="col">First</th>
					<th scope="col">Last</th>
					<th scope="col">Profession</th>
					</tr>
				</thead>
				<tbody>
					<ng-container
					*ngFor="
						let profession of professionRecord
						| paginate : { itemsPerPage: itemsPerPage, currentPage: pageNumber }
					"
					>
					<tr>
						<th scope="row">{{ profession.no }}</th>
						<td>{{ profession.first_name }}</td>
						<td>{{ profession.last_name }}</td>
						<td>{{ profession.profession }}</td>
					</tr>
					</ng-container>
				</tbody>
				</table>
				<app-pagination
				[page]="pageNumber"
				[totalItemCount]="professionRecord.length"
				(itemsPerPageChange)="itemsPerPage = $event"
				(pageChange)="pageNumber = $event"
				>
				</app-pagination>
			#endregion

			#region home ts
				pageNumber: number = 1;
				itemsPerPage: number = 10;
				prdList:IProduct[] = [];
				totalItemCount: number=0;
				ngOnInit() {
					this.totalItemCount = this.professionRecord.length;
				}
			#endregion
		#endregion

		#region page 2 not working
			#region npx-pagination
				npm i ngx-pagination
				import { NgxPaginationModule } from 'ngx-pagination';
			#endregion

			#region html
				<div class="col-lg-3 col-md-4 col-sm-6 col-12" *ngFor="let P of products| paginate
					: {itemsPerPage: pageSize,currentPage: pageNumber,totalItems: allProducts}">
					<div class="d-flex justify-content-center">
					<pagination-controls (pageChange)="renderPage($event)" ></pagination-controls>
					<!-- <pagination-controls (pageChange)="p=$event" ></pagination-controls> -->
					</div>
				</div>
			#endregion

			#region TS
				products: Iproduct[] = [];
				pageNumber:number=1;
				pageSize:number=10;
				allProducts:number=1
				ngOnInit(): void {
					this.getByPagination();
				}

				getByPagination(){
					this.pro.getProPag(this.pageNumber,this.pageSize).subscribe((data:any) => {
					this.products=data.data;
					this.allProducts = data.count;
					console.log(data.count)
					});
				}
				renderPage(event:number) {
					this.pageNumber=event
					this.getByPagination();
				}
			#endregion
		#endregion
	#endregion
#endregion

#region [1] addToCart|toast|totalPrice 
	#region[1] add to cart 24
		#region header html
			<button type="button" [routerLink]="['/prd/cart']"
				class="relative inline-flex items-center p-3 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 mx-2">
				<svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor"
					viewBox="0 0 20 16">
					<path
						d="m10.036 8.278 9.258-7.79A1.979 1.979 0 0 0 18 0H2A1.987 1.987 0 0 0 .641.541l9.395 7.737Z" />
					<path
						d="M11.241 9.817c-.36.275-.801.425-1.255.427-.428 0-.845-.138-1.187-.395L0 2.6V14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2.5l-8.759 7.317Z" />
				</svg>
				<span class="sr-only">Notifications</span>
				<div
					class="absolute inline-flex items-center justify-center w-6 h-6 text-xs font-bold text-white bg-red-500 border-2 border-white rounded-full -top-2 -end-2 dark:border-gray-900">
					{{cartCount}}
				</div>
			</button>
		#endregion

		#region header ts
			public cartCount: number = 0;
			constructor(private prd:ProductService){}
			ngOnInit(): void {
				this.prd.products().subscribe(x=>this.cartCount=x.length)
			}
		#endregion

		#region service
			public cartItemList:any=[]
			public productList=new BehaviorSubject<any>([])
			constructor(private http:HttpClient) { }
			get():Observable<IProduct[]>{
				return this.http.get<IProduct[]>(`${environment.apiLink}/products`)
			}

			getById(id:number): Observable<IProduct> {
				return this.http.get<IProduct>(`${environment.apiLink}/products/${id}`)
			}
			add(newPrd:IProduct) {
				// return this.http.post<IProduct>(`${environment.apiLink}/products`)
				this.cartItemList.push(newPrd)
				this.productList.next(this.cartItemList)
			}
			delete(prd:IProduct){
				this.cartItemList.map((a:IProduct,index:IProduct)=>{
				if(prd.id===a.id){
					this.cartItemList.splice(index,1)
				}
				})
				this.productList.next(this.cartItemList)
			}
			products(): Observable<IProduct[]>{
				return this.productList
			}
		#endregion

		#region prd details html
			<div class="flex">
				<button type="button" (click)="addToCart(this.prd)" *ngIf="showAddToCart"
					class="text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-200 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-900 font-medium rounded-lg text-sm px-5 py-2.5 inline-flex justify-center w-full text-center">
					add to cart
				</button>
				<button type="button" (click)="removeFromCart(this.prd)" *ngIf="showRemoveFromCart"
					class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-200 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900 font-medium rounded-lg text-sm px-5 py-2.5 inline-flex justify-center w-full text-center">
					remove from cart
				</button>
			</div>
		#endregion

		#region prd details ts
			currPrdId!: number
			prd!: IProduct 
			showAddToCart:boolean=true
			showRemoveFromCart:boolean=false
			constructor(
				private activateRoute: ActivatedRoute
				, private prdService: ProductService
				, private router: Router
				, private location: Location) { }
			ngOnInit(): void {
				this.currPrdId = Number(this.activateRoute.snapshot.paramMap.get('pid'))
				this.prdService.getById(this.currPrdId).subscribe(x => this.prd = x)
			}
			goBack() {
				this.location.back()
			}
			addToCart(newPrd:IProduct){
				this.showAddToCart=false
				this.showRemoveFromCart=true
				this.prdService.add(newPrd)
			}
			removeFromCart(newPrd:IProduct){
				this.showAddToCart=true
				this.showRemoveFromCart=false
				this.prdService.delete(newPrd)
			}
		#endregion

		#region prd html
			<div class="flex items-center justify-between">
				<span class="text-3xl font-bold text-gray-900 dark:text-white">{{item.price|currency
					:'EGP':'symbol'}}</span>
				<div class="text-white bg-yellow-700 hover:bg-yellow-800 focus:ring-4 focus:outline-none focus:ring-yellow-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-yellow-600 dark:hover:bg-yellow-700 dark:focus:ring-yellow-800"
					routerLink="/prd/{{item.id}}">
					info
				</div>
				<div (click)="removeFromCart(item)"
					class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
					-
				</div>
				<div (click)="addToCart(item)"
					class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
					+
				</div>
			</div>
		#endregion

		#region prd ts
			prdList!: IProduct[]
			pageNumber: number = 1;
			totalItemCount: number=0;
			itemsPerPage: number = 8;
			constructor(private prd: ProductService) {}
			ngOnInit(): void {
				this.prd.get().subscribe(x => this.prdList = x)
				this.totalItemCount=this.prdList.length
			}
			addToCart(newPrd:IProduct){
				this.prd.add(newPrd)
			}
			removeFromCart(prd:IProduct){
				this.prd.delete(prd)
			}
		#endregion
	#endregion

	#region[2] toaster 25
		#region html
			<div id="toast-interactive" *ngIf="showToaster" class="w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:bg-gray-800 dark:text-gray-400" role="alert">
				<div class="flex">
					<div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:text-blue-300 dark:bg-blue-900">
						<svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
							<path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 1v5h-5M2 19v-5h5m10-4a8 8 0 0 1-14.947 3.97M1 10a8 8 0 0 1 14.947-3.97"/>
						</svg>
						<span class="sr-only">Refresh icon</span>
					</div>
					<div class="text-sm font-normal ms-3">
						<span class="mb-1 text-sm font-semibold text-gray-900 dark:text-white">Update available</span>
						<div class="mb-2 text-sm font-normal">A new software version is available for download.</div> 
						<div class="grid grid-cols-2 gap-2">
							<div>
								<a href="#" class="inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800">Update</a>
							</div>
							<div>
								<a href="#" class="inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 dark:bg-gray-600 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">Not now</a> 
							</div>
						</div>    
					</div>
					<button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white items-center justify-center flex-shrink-0 text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-interactive" aria-label="Close">
						<span class="sr-only">Close</span>
						<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
							<path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
						</svg>
					</button>
				</div>
			</div>

			<button type="submit" (click)="addProduct()"
				class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
				Register new account
			</button>
		#endregion

		#region toaster ts
			showToaster:boolean=false
			constructor(private prd:PrdService,private route:Router){}

			addProduct(){
				const prd1:StaticProduct={
					id: 100,
					name: 'p100',
					price: 100,
					quantity: 1,
					imgUrl: 'https://picsum.photos/2000/1100',
					categoryId: 1
				}
				this.prd.add(prd1).subscribe(x=>{
				this.showToaster=true
				setTimeout(() => {
					this.showToaster = false;
					this.route.navigateByUrl('/products')
				}, 5000);
				return x
				})
			}
		#endregion
	#endregion

	#region[3] total price 26
		#region service
			public cartItemList: any = []
			public productList = new BehaviorSubject<any>([])
			constructor(private http: HttpClient) { }
			get(): Observable<IProduct[]> {
				console.log(`${environment.apiLink}/products`)
				return this.http.get<IProduct[]>(`${environment.apiLink}/products`)
			}

			getById(id: number): Observable<IProduct> {
				return this.http.get<IProduct>(`${environment.apiLink}/products/${id}`)
			}
			add(newPrd: IProduct) {
				this.cartItemList.push(newPrd)
				this.productList.next(this.cartItemList)
			}

			delete(prd: IProduct) {
				this.cartItemList.map((a: IProduct, index: IProduct) => {
				if (prd.id === a.id) {
					this.cartItemList.splice(index, 1)
				}
				})
				this.productList.next(this.cartItemList)
			}
			products(): Observable<IProduct[]> {
				return this.productList
			}
			calcPrice() {
				let total = 0
				this.cartItemList.map((x: any) => {
				total += x.price
				})
				return total
			}
		#endregion

		#region cart ts
			productShow:IProduct[]=[]
			totalPrice:number=0
			constructor(private prd:ProductService){}
			ngOnInit(): void {
				this.prd.products().subscribe(x=>this.productShow=x)
				this.totalPrice=this.prd.calcPrice()
			}
			remove(newItem:IProduct){
				this.prd.delete(newItem)
			}
		#endregion

		#region cart html
			<span class="text-5xl font-extrabold tracking-tight">{{totalPrice|currency :'EGP':'symbol'}}</span>
		#endregion
	#endregion
#endregion

#region [1] copy 
	#region [0] install
		ng generate component copy-example
		npm install primeng primeicons --save
	#endregion

	#region [2] app module
		BrowserAnimationsModule,
		InputTextModule,
		TooltipModule
	#endregion

	#region [3] html 
		#region [1] tailwind
			<div class="flex items-center space-x-2">
			<input #copyText class="border border-gray-300 p-2" type="text" value="Text to Copy">
			<button (click)="copyToClipboard(copyText.value)" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
				Copy
			</button>
			</div>
		#endregion

		#region [2] html  bootstrap	
			<input pInputText type="text" [(ngModel)]="textToCopy" #inputField>
			<button type="button" pButton icon="pi pi-copy" (click)="copyToClipboard(inputField)" pTooltip="Copy to clipboard" tooltipPosition="right"></button>
		#endregion
	#endregion

	#region [2] ts tailwind
		import { Component } from '@angular/core';

		@Component({
		selector: 'app-copy-example',
		templateUrl: './copy-example.component.html',
		styleUrls: ['./copy-example.component.css']
		})
		export class CopyExampleComponent {
			copyToClipboard(text: string): void {
				const el = document.createElement('textarea');
				el.value = text;
				document.body.appendChild(el);
				el.select();
				document.execCommand('copy');
				document.body.removeChild(el);
			}
		}
	#endregion

	#region [3] ts bootstrap
		textToCopy: string = 'Text to copy';
		copyToClipboard(inputField: HTMLInputElement) {
			inputField.select();
			document.execCommand('copy');
		}
	#endregion
#endregion

#region [1] charts
	#region [1] tailwind.config 
		module.exports = {
		content: [
			"./src/**/*.{html,ts}",
			"./node_modules/flowbite/**/*.js" // add this line
		],
		theme: {
			extend: {},
		},
		plugins: [
			require('flowbite/plugin')({ //todo edit here chart
			charts: true,
		}),
		],
		}
	#endregion

	#region [1] install
		npm install apexcharts --save
		npm install primeng
	#endregion

	#region [1] primeng
		#region [1] install 
			npm install primeng
		#endregion

		#region [2] angular.json
					"styles": [
				"node_modules/primeng/resources/themes/lara-light-blue/theme.css",
				"node_modules/primeng/resources/primeng.min.css",
				...
			]
		#endregion

		#region [3] style.css
			@import "primeng/resources/themes/lara-light-blue/theme.css";
			@import "primeng/resources/primeng.css";
		#endregion
	#endregion

	#region [1] use tooltips
		#region [1] install 
			npm install primeng
			import { TooltipModule } from 'primeng/tooltip';
		#endregion

		#region [2] html 
			<button pButton [pTooltip]="tooltipContent" tooltipPosition="bottom" label="Button"></button>
			<ng-template #tooltipContent>
			<div class="flex align-items-center">
				<img src="https://primefaces.org/cdn/primeng/images/primeng.svg" height="20" class="mr-2" />
				<span> <b>PrimeNG</b> rocks! </span>
			</div>
			</ng-template>
		#endregion
	#endregion
#endregion

#region [1] qr
	#region [1] install 
		npm install angularx-qrcode@16.0.2 --save-dev @types/qrcode
	#endregion

	#region [2] app module import 
		import { QRCodeModule } from 'angularx-qrcode';
		QRCodeModule
	#endregion

	#region [3] html
		<qrcode [qrdata]="'Your data string'" [width]="256" [errorCorrectionLevel]="'M'"></qrcode>
	#endregion
#endregion

#region [1] translate 
	#region [1] install
		ng add @angular/localize
	#endregion

	#region [2] html
		<div i18n>Welcome to my application</div>
	#endregion

	#region [3] app module 
		npm install @ngx-translate/core @ngx-translate/http-loader --save

		import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
		import { TranslateHttpLoader } from '@ngx-translate/http-loader';
		import { HttpClientModule, HttpClient } from '@angular/common/http';

		export function HttpLoaderFactory(http: HttpClient) {
			return new TranslateHttpLoader(http, './assets/i18n/', '.json');
		}
		#region [1] imports
				TranslateModule.forRoot({
					loader: {
						provide: TranslateLoader,
						useFactory: HttpLoaderFactory,
						deps: [HttpClient]
					}
				}),
		#endregion
	#endregion

	#region [4] app component
		constructor(private primengConfig: PrimeNGConfig) {
			// Set up PrimeNG to use translations
			this.primengConfig.setTranslation({
				// Add translations for PrimeNG components
				// Example:
				// 'primeng': {
				//     // Add translations for PrimeNG components here
				// }
			});
		}
	#endregion

	#region [5] html header
		<select (change)="changeLanguage($event.target.value)">
		<option value="en">English</option>
		<option value="ar">Arabic</option>
		</select>
	#endregion

	#region [6] ts header 
		constructor(private translateService: TranslateService) { }

		changeLanguage(language: string) {
			this.translateService.use(language);
		}
	#endregion
#endregion

#region [1] fonts
	#region [1] angular.json
			"assets": [
				"src/favicon.ico",
				"src/assets",
				{
					"glob": "**/*",
					"input": "src/assets/fonts/",
					"output": "/assets/fonts/"
				}
			],
	#endregion

	#region [1] style.css
		/* Neo Sans Arabic */
		@font-face {
			font-family: 'Neo Sans Arabic';
			src: url('../assets/fonts/neo-sans-arabic.ttf') format('truetype');
			/* Add more src lines if you have different font formats */
		}

		/* Inter */
		@font-face {
			font-family: 'Inter';
			src: url('../assets/fonts/inter.ttf') format('truetype');
			/* Add more src lines if you have different font formats */
		}

		body {
			font-family: 'Inter', Arial, sans-serif; /* Fallback fonts */
		}

	#endregion
#endregion